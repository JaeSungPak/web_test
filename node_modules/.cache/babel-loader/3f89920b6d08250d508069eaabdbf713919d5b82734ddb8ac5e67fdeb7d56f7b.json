{"ast":null,"code":"import axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nconst serviceAxios = axios.create({\n  baseURL: \"\",\n  timeout: 15 * 1000,\n  withCredentials: false,\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\"\n  }\n});\naxiosRetry(serviceAxios, {\n  retries: 2,\n  shouldResetTimeout: true,\n  retryDelay: retryCount => {\n    return retryCount * 10000;\n  },\n  retryCondition: err => {\n    const {\n      message\n    } = err;\n    return message.includes(\"timeout\");\n  }\n});\nserviceAxios.interceptors.request.use(config => {\n  console.log(\"Define request interceptor\");\n  return config;\n}, err => {\n  console.log(\"Define request interceptor error\");\n  return Promise.reject(err);\n});\nserviceAxios.interceptors.response.use(response => {\n  console.log(\"Define response interceptor\");\n  return response;\n}, err => {\n  console.log(\"Define response interceptor error\");\n  return Promise.reject(err);\n});\nfunction createRequest(service) {\n  return function (config) {\n    return service(config);\n  };\n}\nexport default createRequest(serviceAxios);","map":{"version":3,"names":["axios","axiosRetry","serviceAxios","create","baseURL","timeout","withCredentials","headers","retries","shouldResetTimeout","retryDelay","retryCount","retryCondition","err","message","includes","interceptors","request","use","config","console","log","Promise","reject","response","createRequest","service"],"sources":["/Users/parkjaesung/Documents/GitHub/mingle_ai_web/src/apis/square/AxiosInstanceSquare.ts"],"sourcesContent":["import axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport {\n  type AxiosInstance,\n  InternalAxiosRequestConfig,\n  AxiosRequestConfig,\n  AxiosResponse,\n  AxiosError,\n} from \"axios\";\n\nconst serviceAxios = axios.create({\n  baseURL: \"\",\n  timeout: 15 * 1000,\n  withCredentials: false,\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\",\n  },\n});\n\naxiosRetry(serviceAxios, {\n  retries: 2,\n  shouldResetTimeout: true,\n  retryDelay: (retryCount) => {\n    return retryCount * 10000;\n  },\n  retryCondition: (err) => {\n    const { message } = err;\n    return message.includes(\"timeout\");\n  },\n});\n\nserviceAxios.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    console.log(\"Define request interceptor\");\n    return config;\n  },\n  (err: AxiosError) => {\n    console.log(\"Define request interceptor error\");\n    return Promise.reject(err);\n  }\n);\n\nserviceAxios.interceptors.response.use(\n  (response: AxiosResponse) => {\n    console.log(\"Define response interceptor\");\n    return response;\n  },\n  (err: AxiosError) => {\n    console.log(\"Define response interceptor error\");\n    return Promise.reject(err);\n  }\n);\n\nfunction createRequest(service: AxiosInstance) {\n  return function <T>(config: AxiosRequestConfig): Promise<T> {\n    return service(config);\n  };\n}\n\nexport default createRequest(serviceAxios);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AASpC,MAAMC,YAAY,GAAGF,KAAK,CAACG,MAAM,CAAC;EAChCC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,EAAE,GAAG,IAAI;EAClBC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFN,UAAU,CAACC,YAAY,EAAE;EACvBM,OAAO,EAAE,CAAC;EACVC,kBAAkB,EAAE,IAAI;EACxBC,UAAU,EAAGC,UAAU,IAAK;IAC1B,OAAOA,UAAU,GAAG,KAAK;EAC3B,CAAC;EACDC,cAAc,EAAGC,GAAG,IAAK;IACvB,MAAM;MAAEC;IAAQ,CAAC,GAAGD,GAAG;IACvB,OAAOC,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC;EACpC;AACF,CAAC,CAAC;AAEFb,YAAY,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAClCC,MAAkC,IAAK;EACtCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EACzC,OAAOF,MAAM;AACf,CAAC,EACAN,GAAe,IAAK;EACnBO,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C,OAAOC,OAAO,CAACC,MAAM,CAACV,GAAG,CAAC;AAC5B,CACF,CAAC;AAEDX,YAAY,CAACc,YAAY,CAACQ,QAAQ,CAACN,GAAG,CACnCM,QAAuB,IAAK;EAC3BJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC1C,OAAOG,QAAQ;AACjB,CAAC,EACAX,GAAe,IAAK;EACnBO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EAChD,OAAOC,OAAO,CAACC,MAAM,CAACV,GAAG,CAAC;AAC5B,CACF,CAAC;AAED,SAASY,aAAaA,CAACC,OAAsB,EAAE;EAC7C,OAAO,UAAaP,MAA0B,EAAc;IAC1D,OAAOO,OAAO,CAACP,MAAM,CAAC;EACxB,CAAC;AACH;AAEA,eAAeM,aAAa,CAACvB,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}