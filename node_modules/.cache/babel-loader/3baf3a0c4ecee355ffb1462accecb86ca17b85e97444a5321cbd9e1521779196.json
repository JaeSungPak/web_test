{"ast":null,"code":"import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n  constructor(t) {\n    this.uid = t;\n  }\n  isAuthenticated() {\n    return null != this.uid;\n  }\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey() {\n    return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n  }\n  isEqual(t) {\n    return t.uid === this.uid;\n  }\n}\n\n/** A user with a null UID. */\nUser.UNAUTHENTICATED = new User(null),\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), User.MOCK_USER = new User(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet d = \"10.7.0\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst f = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nfunction setLogLevel(t) {\n  f.setLogLevel(t);\n}\nfunction __PRIVATE_logDebug(t, ...e) {\n  if (f.logLevel <= LogLevel.DEBUG) {\n    const r = e.map(__PRIVATE_argToString);\n    f.debug(`Firestore (${d}): ${t}`, ...r);\n  }\n}\nfunction __PRIVATE_logError(t, ...e) {\n  if (f.logLevel <= LogLevel.ERROR) {\n    const r = e.map(__PRIVATE_argToString);\n    f.error(`Firestore (${d}): ${t}`, ...r);\n  }\n}\n\n/**\n * @internal\n */\nfunction __PRIVATE_logWarn(t, ...e) {\n  if (f.logLevel <= LogLevel.WARN) {\n    const r = e.map(__PRIVATE_argToString);\n    f.warn(`Firestore (${d}): ${t}`, ...r);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction __PRIVATE_argToString(t) {\n  if (\"string\" == typeof t) return t;\n  try {\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /** Formats an object as a JSON string, suitable for logging. */\n    return function __PRIVATE_formatJSON(t) {\n      return JSON.stringify(t);\n    }(t);\n  } catch (e) {\n    // Converting to JSON failed, just log the object directly\n    return t;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(t = \"Unexpected state\") {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw __PRIVATE_logError(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nfunction __PRIVATE_hardAssert(t, e) {\n  t || fail();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nfunction __PRIVATE_debugCast(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst E = \"ok\",\n  m = \"cancelled\",\n  A = \"unknown\",\n  T = \"invalid-argument\",\n  P = \"deadline-exceeded\",\n  R = \"not-found\",\n  I = \"already-exists\",\n  V = \"permission-denied\",\n  p = \"unauthenticated\",\n  y = \"resource-exhausted\",\n  w = \"failed-precondition\",\n  g = \"aborted\",\n  F = \"out-of-range\",\n  v = \"unimplemented\",\n  D = \"internal\",\n  b = \"unavailable\",\n  C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */\nclass FirestoreError extends FirebaseError {\n  /** @hideconstructor */\n  constructor(\n  /**\n   * The backend error code associated with this error.\n   */\n  t,\n  /**\n   * A custom error description.\n   */\n  e) {\n    super(t, e), this.code = t, this.message = e,\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_Deferred {\n  constructor() {\n    this.promise = new Promise((t, e) => {\n      this.resolve = t, this.reject = e;\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_OAuthToken {\n  constructor(t, e) {\n    this.user = e, this.type = \"OAuth\", this.headers = new Map(), this.headers.set(\"Authorization\", `Bearer ${t}`);\n  }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\nclass __PRIVATE_EmptyAuthCredentialsProvider {\n  getToken() {\n    return Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {\n    // Fire with initial user.\n    t.enqueueRetryable(() => e(User.UNAUTHENTICATED));\n  }\n  shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\nclass __PRIVATE_EmulatorAuthCredentialsProvider {\n  constructor(t) {\n    this.token = t,\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n  invalidateToken() {}\n  start(t, e) {\n    this.changeListener = e,\n    // Fire with initial user.\n    t.enqueueRetryable(() => e(this.token.user));\n  }\n  shutdown() {\n    this.changeListener = null;\n  }\n}\n\n/** Credential provider for the Lite SDK. */\nclass __PRIVATE_LiteAuthCredentialsProvider {\n  constructor(t) {\n    this.auth = null, t.onInit(t => {\n      this.auth = t;\n    });\n  }\n  getToken() {\n    return this.auth ? this.auth.getToken().then(t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.accessToken), new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {}\n  shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nclass __PRIVATE_FirstPartyToken {\n  constructor(t, e, r) {\n    this.t = t, this.i = e, this.o = r, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, this.u = new Map();\n  }\n  /**\n   * Gets an authorization token, using a provided factory function, or return\n   * null.\n   */\n  l() {\n    return this.o ? this.o() : null;\n  }\n  get headers() {\n    this.u.set(\"X-Goog-AuthUser\", this.t);\n    // Use array notation to prevent minification\n    const t = this.l();\n    return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), this.u;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nclass __PRIVATE_FirstPartyAuthCredentialsProvider {\n  constructor(t, e, r) {\n    this.t = t, this.i = e, this.o = r;\n  }\n  getToken() {\n    return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));\n  }\n  start(t, e) {\n    // Fire with initial uid.\n    t.enqueueRetryable(() => e(User.FIRST_PARTY));\n  }\n  shutdown() {}\n  invalidateToken() {}\n}\nclass AppCheckToken {\n  constructor(t) {\n    this.value = t, this.type = \"AppCheck\", this.headers = new Map(), t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n  }\n}\n\n/** AppCheck token provider for the Lite SDK. */\nclass __PRIVATE_LiteAppCheckTokenProvider {\n  constructor(t) {\n    this.h = t, this.appCheck = null, t.onInit(t => {\n      this.appCheck = t;\n    });\n  }\n  getToken() {\n    return this.appCheck ? this.appCheck.getToken().then(t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.token), new AppCheckToken(t.token)) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {}\n  shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param longPollingOptions Options that configure long-polling.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(t, e, r, n, i, s, o, a, u) {\n    this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, this.useFetchStreams = u;\n  }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n  constructor(t, e) {\n    this.projectId = t, this.database = e || \"(default)\";\n  }\n  static empty() {\n    return new DatabaseId(\"\", \"\");\n  }\n  get isDefaultDatabase() {\n    return \"(default)\" === this.database;\n  }\n  isEqual(t) {\n    return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;\n  }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n  constructor(t, e, r) {\n    void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), this.segments = t, this.offset = e, this.len = r;\n  }\n  get length() {\n    return this.len;\n  }\n  isEqual(t) {\n    return 0 === BasePath.comparator(this, t);\n  }\n  child(t) {\n    const e = this.segments.slice(this.offset, this.limit());\n    return t instanceof BasePath ? t.forEach(t => {\n      e.push(t);\n    }) : e.push(t), this.construct(e);\n  }\n  /** The index of one past the last segment of the path. */\n  limit() {\n    return this.offset + this.length;\n  }\n  popFirst(t) {\n    return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n  }\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n  get(t) {\n    return this.segments[this.offset + t];\n  }\n  isEmpty() {\n    return 0 === this.length;\n  }\n  isPrefixOf(t) {\n    if (t.length < this.length) return !1;\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n    return !0;\n  }\n  isImmediateParentOf(t) {\n    if (this.length + 1 !== t.length) return !1;\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n    return !0;\n  }\n  forEach(t) {\n    for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);\n  }\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n  static comparator(t, e) {\n    const r = Math.min(t.length, e.length);\n    for (let n = 0; n < r; n++) {\n      const r = t.get(n),\n        i = e.get(n);\n      if (r < i) return -1;\n      if (r > i) return 1;\n    }\n    return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\nclass ResourcePath extends BasePath {\n  construct(t, e, r) {\n    return new ResourcePath(t, e, r);\n  }\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join(\"/\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...t) {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const e = [];\n    for (const r of t) {\n      if (r.indexOf(\"//\") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);\n      // Strip leading and traling slashed.\n      e.push(...r.split(\"/\").filter(t => t.length > 0));\n    }\n    return new ResourcePath(e);\n  }\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n}\nconst S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\nclass FieldPath$1 extends BasePath {\n  construct(t, e, r) {\n    return new FieldPath$1(t, e, r);\n  }\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  static isValidIdentifier(t) {\n    return S.test(t);\n  }\n  canonicalString() {\n    return this.toArray().map(t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), FieldPath$1.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t)).join(\".\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField() {\n    return 1 === this.length && \"__name__\" === this.get(0);\n  }\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField() {\n    return new FieldPath$1([\"__name__\"]);\n  }\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(t) {\n    const e = [];\n    let r = \"\",\n      n = 0;\n    const __PRIVATE_addCurrentSegment = () => {\n      if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n      e.push(r), r = \"\";\n    };\n    let i = !1;\n    for (; n < t.length;) {\n      const e = t[n];\n      if (\"\\\\\" === e) {\n        if (n + 1 === t.length) throw new FirestoreError(T, \"Path has trailing escape character: \" + t);\n        const e = t[n + 1];\n        if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new FirestoreError(T, \"Path has invalid escape sequence: \" + t);\n        r += e, n += 2;\n      } else \"`\" === e ? (i = !i, n++) : \".\" !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), n++);\n    }\n    if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, \"Unterminated ` in path: \" + t);\n    return new FieldPath$1(e);\n  }\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass DocumentKey {\n  constructor(t) {\n    this.path = t;\n  }\n  static fromPath(t) {\n    return new DocumentKey(ResourcePath.fromString(t));\n  }\n  static fromName(t) {\n    return new DocumentKey(ResourcePath.fromString(t).popFirst(5));\n  }\n  static empty() {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(t) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n  }\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  /** Returns the fully qualified path to the parent collection. */\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n  isEqual(t) {\n    return null !== t && 0 === ResourcePath.comparator(this.path, t.path);\n  }\n  toString() {\n    return this.path.toString();\n  }\n  static comparator(t, e) {\n    return ResourcePath.comparator(t.path, e.path);\n  }\n  static isDocumentKey(t) {\n    return t.length % 2 == 0;\n  }\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n  static fromSegments(t) {\n    return new DocumentKey(new ResourcePath(t.slice()));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_validateNonEmptyArgument(t, e, r) {\n  if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction __PRIVATE_validateDocumentPath(t) {\n  if (!DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nfunction __PRIVATE_validateCollectionPath(t) {\n  if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction __PRIVATE_valueDescription(t) {\n  if (void 0 === t) return \"undefined\";\n  if (null === t) return \"null\";\n  if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);\n  if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n  if (\"object\" == typeof t) {\n    if (t instanceof Array) return \"an array\";\n    {\n      const e = /** try to get the constructor name for an object. */\n      function __PRIVATE_tryGetCustomObjectType(t) {\n        if (t.constructor) return t.constructor.name;\n        return null;\n      }\n      /**\n      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n      * underlying instance. Throws if  `obj` is not an instance of `T`.\n      *\n      * This cast is used in the Lite and Full SDK to verify instance types for\n      * arguments passed to the public API.\n      * @internal\n      */(t);\n      return e ? `a custom ${e} object` : \"an object\";\n    }\n  }\n  return \"function\" == typeof t ? \"a function\" : fail();\n}\nfunction __PRIVATE_cast(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  if (\"_delegate\" in t && (\n  // Unwrap Compat types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t = t._delegate), !(t instanceof e)) {\n    if (e.name === t.constructor.name) throw new FirestoreError(T, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      const r = __PRIVATE_valueDescription(t);\n      throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);\n    }\n  }\n  return t;\n}\nfunction __PRIVATE_validatePositiveNumber(t, e) {\n  if (e <= 0) throw new FirestoreError(T, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction __PRIVATE_cloneLongPollingOptions(t) {\n  const e = {};\n  return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */\nlet N = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction __PRIVATE_generateUniqueDebugId() {\n  return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {\n    return 268435456 + Math.round(2147483648 * Math.random());\n  }() : N++, \"0x\" + N.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction __PRIVATE_isNullOrUndefined(t) {\n  return null == t;\n}\n\n/** Returns whether the value represents -0. */\nfunction __PRIVATE_isNegativeZero(t) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst O = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar q, B;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction __PRIVATE_mapCodeFromHttpStatus(t) {\n  if (void 0 === t) return __PRIVATE_logError(\"RPC_ERROR\", \"HTTP error has no status\"), A;\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (t) {\n    case 200:\n      // OK\n      return E;\n    case 400:\n      // Bad Request\n      return w;\n\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n    case 401:\n      // Unauthorized\n      return p;\n    case 403:\n      // Forbidden\n      return V;\n    case 404:\n      // Not Found\n      return R;\n    case 409:\n      // Conflict\n      return g;\n\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n    case 416:\n      // Range Not Satisfiable\n      return F;\n    case 429:\n      // Too Many Requests\n      return y;\n    case 499:\n      // Client Closed Request\n      return m;\n    case 500:\n      // Internal Server Error\n      return A;\n\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n    case 501:\n      // Unimplemented\n      return v;\n    case 503:\n      // Service Unavailable\n      return b;\n    case 504:\n      // Gateway Timeout\n      return P;\n    default:\n      return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\n(B = q || (q = {}))[B.OK = 0] = \"OK\", B[B.CANCELLED = 1] = \"CANCELLED\", B[B.UNKNOWN = 2] = \"UNKNOWN\", B[B.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", B[B.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", B[B.NOT_FOUND = 5] = \"NOT_FOUND\", B[B.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", B[B.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", B[B.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", B[B.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", B[B.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", B[B.ABORTED = 10] = \"ABORTED\", B[B.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", B[B.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", B[B.INTERNAL = 13] = \"INTERNAL\", B[B.UNAVAILABLE = 14] = \"UNAVAILABLE\", B[B.DATA_LOSS = 15] = \"DATA_LOSS\";\nclass __PRIVATE_FetchConnection extends\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass __PRIVATE_RestConnection {\n  constructor(t) {\n    this.databaseInfo = t, this.databaseId = t.databaseId;\n    const e = t.ssl ? \"https\" : \"http\",\n      r = encodeURIComponent(this.databaseId.projectId),\n      n = encodeURIComponent(this.databaseId.database);\n    this.m = e + \"://\" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = \"(default)\" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;\n  }\n  get P() {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n    // where to run the query, and expect the `request` to NOT specify the \"path\".\n    return !1;\n  }\n  R(t, e, r, n, i) {\n    const s = __PRIVATE_generateUniqueDebugId(),\n      o = this.I(t, e);\n    __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${t}' ${s}:`, o, r);\n    const a = {\n      \"google-cloud-resource-prefix\": this.A,\n      \"x-goog-request-params\": this.T\n    };\n    return this.V(a, n, i), this.p(t, o, a, r).then(e => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${t}' ${s}: `, e), e), e => {\n      throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${t}' ${s} failed with error: `, e, \"url: \", o, \"request:\", r), e;\n    });\n  }\n  g(t, e, r, n, i, s) {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.R(t, e, r, n, i);\n  }\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  V(t, e, r) {\n    t[\"X-Goog-Api-Client\"] =\n    // SDK_VERSION is updated to different value at runtime depending on the entry point,\n    // so we need to get its value when we need it in a function.\n    function __PRIVATE_getGoogApiClientValue() {\n      return \"gl-js/ fire/\" + d;\n    }(),\n    // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid triggering preflight requests.\n    t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), e && e.headers.forEach((e, r) => t[r] = e), r && r.headers.forEach((e, r) => t[r] = e);\n  }\n  I(t, e) {\n    const r = O[t];\n    return `${this.m}/v1/${e}:${r}`;\n  }\n} {\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  constructor(t, e) {\n    super(t), this.F = e;\n  }\n  v(t, e) {\n    throw new Error(\"Not supported by FetchConnection\");\n  }\n  async p(t, e, r, n) {\n    var i;\n    const s = JSON.stringify(n);\n    let o;\n    try {\n      o = await this.F(e, {\n        method: \"POST\",\n        headers: r,\n        body: s\n      });\n    } catch (t) {\n      const e = t;\n      throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), \"Request failed with error: \" + e.statusText);\n    }\n    if (!o.ok) {\n      let t = await o.json();\n      Array.isArray(t) && (t = t[0]);\n      const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;\n      throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n    }\n    return o.json();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass __PRIVATE_AggregateImpl {\n  constructor(t, e, r) {\n    this.alias = t, this.aggregateType = e, this.fieldPath = r;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction __PRIVATE_randomBytes(t) {\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const e =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n    r = new Uint8Array(t);\n  if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(r);else\n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) r[e] = Math.floor(256 * Math.random());\n  return r;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */\nclass __PRIVATE_AutoId {\n  static newId() {\n    // Alphanumeric characters\n    const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n      e = Math.floor(256 / t.length) * t.length;\n    // The largest byte value that is a multiple of `char.length`.\n    let r = \"\";\n    for (; r.length < 20;) {\n      const n = __PRIVATE_randomBytes(40);\n      for (let i = 0; i < n.length; ++i)\n      // Only accept values that are [0, maxMultiple), this ensures they can\n      // be evenly mapped to indices of `chars` via a modulo operation.\n      r.length < 20 && n[i] < e && (r += t.charAt(n[i] % t.length));\n    }\n    return r;\n  }\n}\nfunction __PRIVATE_primitiveComparator(t, e) {\n  return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */\nfunction __PRIVATE_arrayEquals(t, e, r) {\n  return t.length === e.length && t.every((t, n) => r(t, e[n]));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_objectSize(t) {\n  let e = 0;\n  for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;\n  return e;\n}\nfunction forEach(t, e) {\n  for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass __PRIVATE_Base64DecodeError extends Error {\n  constructor() {\n    super(...arguments), this.name = \"Base64DecodeError\";\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n  constructor(t) {\n    this.binaryString = t;\n  }\n  static fromBase64String(t) {\n    const e = function __PRIVATE_decodeBase64(t) {\n      try {\n        return atob(t);\n      } catch (t) {\n        // Check that `DOMException` is defined before using it to avoid\n        // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n        // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n        throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + t) : t;\n      }\n    }\n    /** Converts a binary string to a Base64 encoded string. */(t);\n    return new ByteString(e);\n  }\n  static fromUint8Array(t) {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const e =\n    /**\n    * Helper function to convert an Uint8array to a binary string.\n    */\n    function __PRIVATE_binaryStringFromUint8Array(t) {\n      let e = \"\";\n      for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);\n      return e;\n    }\n    /**\n    * Helper function to convert a binary string to an Uint8Array.\n    */(t);\n    return new ByteString(e);\n  }\n  [Symbol.iterator]() {\n    let t = 0;\n    return {\n      next: () => t < this.binaryString.length ? {\n        value: this.binaryString.charCodeAt(t++),\n        done: !1\n      } : {\n        value: void 0,\n        done: !0\n      }\n    };\n  }\n  toBase64() {\n    return function __PRIVATE_encodeBase64(t) {\n      return btoa(t);\n    }(this.binaryString);\n  }\n  toUint8Array() {\n    return function __PRIVATE_uint8ArrayFromBinaryString(t) {\n      const e = new Uint8Array(t.length);\n      for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);\n      return e;\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n    (this.binaryString);\n  }\n  approximateByteSize() {\n    return 2 * this.binaryString.length;\n  }\n  compareTo(t) {\n    return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);\n  }\n  isEqual(t) {\n    return this.binaryString === t.binaryString;\n  }\n}\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\nconst Q = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nfunction __PRIVATE_normalizeTimestamp(t) {\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (__PRIVATE_hardAssert(!!t), \"string\" == typeof t) {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    let e = 0;\n    const r = Q.exec(t);\n    if (__PRIVATE_hardAssert(!!r), r[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let t = r[1];\n      t = (t + \"000000000\").substr(0, 9), e = Number(t);\n    }\n    // Parse the date to get the seconds.\n    const n = new Date(t);\n    return {\n      seconds: Math.floor(n.getTime() / 1e3),\n      nanos: e\n    };\n  }\n  return {\n    seconds: __PRIVATE_normalizeNumber(t.seconds),\n    nanos: __PRIVATE_normalizeNumber(t.nanos)\n  };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nfunction __PRIVATE_normalizeNumber(t) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nfunction __PRIVATE_normalizeByteString(t) {\n  return \"string\" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  t,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  e) {\n    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n    if (e >= 1e9) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n    if (t < -62135596800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n    // This will break in the year 10,000.\n    if (t >= 253402300800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n  }\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date - The date to initialize the `Timestamp` from.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n  static fromDate(t) {\n    return Timestamp.fromMillis(t.getTime());\n  }\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds - Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n  static fromMillis(t) {\n    const e = Math.floor(t / 1e3),\n      r = Math.floor(1e6 * (t - 1e3 * e));\n    return new Timestamp(e, r);\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n   * causes a loss of precision since `Date` objects only support millisecond\n   * precision.\n   *\n   * @returns JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @returns The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  toMillis() {\n    return 1e3 * this.seconds + this.nanoseconds / 1e6;\n  }\n  _compareTo(t) {\n    return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);\n  }\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other - The `Timestamp` to compare against.\n   * @returns true if this `Timestamp` is equal to the provided one.\n   */\n  isEqual(t) {\n    return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n  }\n  /** Returns a textual representation of this `Timestamp`. */\n  toString() {\n    return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n  }\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\n   * Converts this object to a primitive string, which allows `Timestamp` objects\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexiographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexiographical ordering.\n    const t = this.seconds - -62135596800;\n    // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n    return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nfunction __PRIVATE_isServerTimestamp(t) {\n  var e, r;\n  return \"server_timestamp\" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nfunction __PRIVATE_getPreviousValue(t) {\n  const e = t.mapValue.fields.__previous_value__;\n  return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nfunction __PRIVATE_getLocalWriteTime(t) {\n  const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);\n  return new Timestamp(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst $ = {\n  fields: {\n    __type__: {\n      stringValue: \"__max__\"\n    }\n  }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction __PRIVATE_typeOrder(t) {\n  return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n  function __PRIVATE_isMaxValue(t) {\n    return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n  }\n  /**\n  * @license\n  * Copyright 2022 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Represents a bound of a query.\n  *\n  * The bound is specified with the given components representing a position and\n  * whether it's just before or just after the position (relative to whatever the\n  * query order is).\n  *\n  * The position represents a logical index position for a query. It's a prefix\n  * of values for the (potentially implicit) order by clauses of a query.\n  *\n  * Bound provides a function to determine whether a document comes before or\n  * after a bound. This is influenced by whether the position is just before or\n  * just after the provided values.\n  */(t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : fail();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nfunction __PRIVATE_valueEquals(t, e) {\n  if (t === e) return !0;\n  const r = __PRIVATE_typeOrder(t);\n  if (r !== __PRIVATE_typeOrder(e)) return !1;\n  switch (r) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return !0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return t.booleanValue === e.booleanValue;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));\n    case 3 /* TypeOrder.TimestampValue */:\n      return function __PRIVATE_timestampEquals(t, e) {\n        if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length)\n          // Use string equality for ISO 8601 timestamps\n          return t.timestampValue === e.timestampValue;\n        const r = __PRIVATE_normalizeTimestamp(t.timestampValue),\n          n = __PRIVATE_normalizeTimestamp(e.timestampValue);\n        return r.seconds === n.seconds && r.nanos === n.nanos;\n      }(t, e);\n    case 5 /* TypeOrder.StringValue */:\n      return t.stringValue === e.stringValue;\n    case 6 /* TypeOrder.BlobValue */:\n      return function __PRIVATE_blobEquals(t, e) {\n        return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));\n      }(t, e);\n    case 7 /* TypeOrder.RefValue */:\n      return t.referenceValue === e.referenceValue;\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function __PRIVATE_geoPointEquals(t, e) {\n        return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);\n      }(t, e);\n    case 2 /* TypeOrder.NumberValue */:\n      return function __PRIVATE_numberEquals(t, e) {\n        if (\"integerValue\" in t && \"integerValue\" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);\n        if (\"doubleValue\" in t && \"doubleValue\" in e) {\n          const r = __PRIVATE_normalizeNumber(t.doubleValue),\n            n = __PRIVATE_normalizeNumber(e.doubleValue);\n          return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);\n        }\n        return !1;\n      }(t, e);\n    case 9 /* TypeOrder.ArrayValue */:\n      return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function __PRIVATE_objectEquals(t, e) {\n        const r = t.mapValue.fields || {},\n          n = e.mapValue.fields || {};\n        if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;\n        for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;\n        return !0;\n      }\n      /** Returns true if the ArrayValue contains the specified element. */(t, e);\n    default:\n      return fail();\n  }\n}\nfunction __PRIVATE_arrayValueContains(t, e) {\n  return void 0 !== (t.values || []).find(t => __PRIVATE_valueEquals(t, e));\n}\nfunction __PRIVATE_valueCompare(t, e) {\n  if (t === e) return 0;\n  const r = __PRIVATE_typeOrder(t),\n    n = __PRIVATE_typeOrder(e);\n  if (r !== n) return __PRIVATE_primitiveComparator(r, n);\n  switch (r) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return 0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);\n    case 2 /* TypeOrder.NumberValue */:\n      return function __PRIVATE_compareNumbers(t, e) {\n        const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue),\n          n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n        return r < n ? -1 : r > n ? 1 : r === n ? 0 :\n        // one or both are NaN.\n        isNaN(r) ? isNaN(n) ? 0 : -1 : 1;\n      }(t, e);\n    case 3 /* TypeOrder.TimestampValue */:\n      return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));\n    case 5 /* TypeOrder.StringValue */:\n      return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);\n    case 6 /* TypeOrder.BlobValue */:\n      return function __PRIVATE_compareBlobs(t, e) {\n        const r = __PRIVATE_normalizeByteString(t),\n          n = __PRIVATE_normalizeByteString(e);\n        return r.compareTo(n);\n      }(t.bytesValue, e.bytesValue);\n    case 7 /* TypeOrder.RefValue */:\n      return function __PRIVATE_compareReferences(t, e) {\n        const r = t.split(\"/\"),\n          n = e.split(\"/\");\n        for (let t = 0; t < r.length && t < n.length; t++) {\n          const e = __PRIVATE_primitiveComparator(r[t], n[t]);\n          if (0 !== e) return e;\n        }\n        return __PRIVATE_primitiveComparator(r.length, n.length);\n      }(t.referenceValue, e.referenceValue);\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function __PRIVATE_compareGeoPoints(t, e) {\n        const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));\n        if (0 !== r) return r;\n        return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));\n      }(t.geoPointValue, e.geoPointValue);\n    case 9 /* TypeOrder.ArrayValue */:\n      return function __PRIVATE_compareArrays(t, e) {\n        const r = t.values || [],\n          n = e.values || [];\n        for (let t = 0; t < r.length && t < n.length; ++t) {\n          const e = __PRIVATE_valueCompare(r[t], n[t]);\n          if (e) return e;\n        }\n        return __PRIVATE_primitiveComparator(r.length, n.length);\n      }(t.arrayValue, e.arrayValue);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function __PRIVATE_compareMaps(t, e) {\n        if (t === $ && e === $) return 0;\n        if (t === $) return 1;\n        if (e === $) return -1;\n        const r = t.fields || {},\n          n = Object.keys(r),\n          i = e.fields || {},\n          s = Object.keys(i);\n        // Even though MapValues are likely sorted correctly based on their insertion\n        // order (e.g. when received from the backend), local modifications can bring\n        // elements out of order. We need to re-sort the elements to ensure that\n        // canonical IDs are independent of insertion order.\n        n.sort(), s.sort();\n        for (let t = 0; t < n.length && t < s.length; ++t) {\n          const e = __PRIVATE_primitiveComparator(n[t], s[t]);\n          if (0 !== e) return e;\n          const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);\n          if (0 !== o) return o;\n        }\n        return __PRIVATE_primitiveComparator(n.length, s.length);\n      }\n      /** Returns a reference value for the provided database and key. */(t.mapValue, e.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction __PRIVATE_compareTimestamps(t, e) {\n  if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);\n  const r = __PRIVATE_normalizeTimestamp(t),\n    n = __PRIVATE_normalizeTimestamp(e),\n    i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);\n  return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);\n}\nfunction __PRIVATE_refValue(t, e) {\n  return {\n    referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an ArrayValue. */\nfunction isArray(t) {\n  return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */\nfunction __PRIVATE_isNullValue(t) {\n  return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */\nfunction __PRIVATE_isNanValue(t) {\n  return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nfunction __PRIVATE_isMapValue(t) {\n  return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */\nfunction __PRIVATE_deepClone(t) {\n  if (t.geoPointValue) return {\n    geoPointValue: Object.assign({}, t.geoPointValue)\n  };\n  if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n    timestampValue: Object.assign({}, t.timestampValue)\n  };\n  if (t.mapValue) {\n    const e = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return forEach(t.mapValue.fields, (t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r)), e;\n  }\n  if (t.arrayValue) {\n    const e = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);\n    return e;\n  }\n  return Object.assign({}, t);\n}\nclass Bound {\n  constructor(t, e) {\n    this.position = t, this.inclusive = e;\n  }\n}\nfunction __PRIVATE_boundEquals(t, e) {\n  if (null === t) return null === e;\n  if (null === e) return !1;\n  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n  for (let r = 0; r < t.position.length; r++) {\n    if (!__PRIVATE_valueEquals(t.position[r], e.position[r])) return !1;\n  }\n  return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Filter {}\nclass FieldFilter extends Filter {\n  constructor(t, e, r) {\n    super(), this.field = t, this.op = e, this.value = r;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(t, e, r) {\n    return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : \"in\" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : \"not-in\" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);\n  }\n  static createKeyFieldInFilter(t, e, r) {\n    return \"in\" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));\n    // Only compare types with matching backend order (such as double and int).\n  }\n\n  matchesComparison(t) {\n    switch (this.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n        return t < 0;\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        return t <= 0;\n      case \"==\" /* Operator.EQUAL */:\n        return 0 === t;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return 0 !== t;\n      case \">\" /* Operator.GREATER_THAN */:\n        return t > 0;\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        return t >= 0;\n      default:\n        return fail();\n    }\n  }\n  isInequality() {\n    return [\"<\" /* Operator.LESS_THAN */, \"<=\" /* Operator.LESS_THAN_OR_EQUAL */, \">\" /* Operator.GREATER_THAN */, \">=\" /* Operator.GREATER_THAN_OR_EQUAL */, \"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */].indexOf(this.op) >= 0;\n  }\n  getFlattenedFilters() {\n    return [this];\n  }\n  getFilters() {\n    return [this];\n  }\n}\nclass CompositeFilter extends Filter {\n  constructor(t, e) {\n    super(), this.filters = t, this.op = e, this.D = null;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(t, e) {\n    return new CompositeFilter(t, e);\n  }\n  matches(t) {\n    return function __PRIVATE_compositeFilterIsConjunction(t) {\n      return \"and\" /* CompositeOperator.AND */ === t.op;\n    }(this) ? void 0 === this.filters.find(e => !e.matches(t)) : void 0 !== this.filters.find(e => e.matches(t));\n  }\n  getFlattenedFilters() {\n    return null !== this.D || (this.D = this.filters.reduce((t, e) => t.concat(e.getFlattenedFilters()), [])), this.D;\n  }\n  // Returns a mutable copy of `this.filters`\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n}\nfunction __PRIVATE_filterEquals(t, e) {\n  return t instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(t, e) {\n    return e instanceof FieldFilter && t.op === e.op && t.field.isEqual(e.field) && __PRIVATE_valueEquals(t.value, e.value);\n  }(t, e) : t instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(t, e) {\n    if (e instanceof CompositeFilter && t.op === e.op && t.filters.length === e.filters.length) {\n      return t.filters.reduce((t, r, n) => t && __PRIVATE_filterEquals(r, e.filters[n]), !0);\n    }\n    return !1;\n  }\n  /** Filter that matches on key fields (i.e. '__name__'). */(t, e) : void fail();\n}\nclass __PRIVATE_KeyFieldFilter extends FieldFilter {\n  constructor(t, e, r) {\n    super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);\n  }\n  matches(t) {\n    const e = DocumentKey.comparator(t.key, this.key);\n    return this.matchesComparison(e);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nclass __PRIVATE_KeyFieldInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"in\" /* Operator.IN */, e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */, e);\n  }\n  matches(t) {\n    return this.keys.some(e => e.isEqual(t.key));\n  }\n}\n\n/** Filter that matches on key fields not present within an array. */\nclass __PRIVATE_KeyFieldNotInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"not-in\" /* Operator.NOT_IN */, e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */, e);\n  }\n  matches(t) {\n    return !this.keys.some(e => e.isEqual(t.key));\n  }\n}\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {\n  var r;\n  return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map(t => DocumentKey.fromName(t.referenceValue));\n}\n\n/** A Filter that implements the array-contains operator. */\nclass __PRIVATE_ArrayContainsFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nclass __PRIVATE_InFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"in\" /* Operator.IN */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);\n  }\n}\n\n/** A Filter that implements the not-in operator. */\nclass __PRIVATE_NotInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"not-in\" /* Operator.NOT_IN */, e);\n  }\n  matches(t) {\n    if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n      nullValue: \"NULL_VALUE\"\n    })) return !1;\n    const e = t.data.field(this.field);\n    return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nclass __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some(t => __PRIVATE_arrayValueContains(this.value.arrayValue, t));\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nclass OrderBy {\n  constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n    this.field = t, this.dir = e;\n  }\n}\nfunction __PRIVATE_orderByEquals(t, e) {\n  return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nclass SnapshotVersion {\n  constructor(t) {\n    this.timestamp = t;\n  }\n  static fromTimestamp(t) {\n    return new SnapshotVersion(t);\n  }\n  static min() {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n  static max() {\n    return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n  }\n  compareTo(t) {\n    return this.timestamp._compareTo(t.timestamp);\n  }\n  isEqual(t) {\n    return this.timestamp.isEqual(t.timestamp);\n  }\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds() {\n    // Convert to microseconds.\n    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n  }\n  toString() {\n    return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n  }\n  toTimestamp() {\n    return this.timestamp;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n  constructor(t, e) {\n    this.comparator = t, this.root = e || LLRBNode.EMPTY;\n  }\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(t, e) {\n    return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns a copy of the map, with the specified key removed.\n  remove(t) {\n    return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns the value of the node with the given key, or null.\n  get(t) {\n    let e = this.root;\n    for (; !e.isEmpty();) {\n      const r = this.comparator(t, e.key);\n      if (0 === r) return e.value;\n      r < 0 ? e = e.left : r > 0 && (e = e.right);\n    }\n    return null;\n  }\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(t) {\n    // Number of nodes that were pruned when descending right\n    let e = 0,\n      r = this.root;\n    for (; !r.isEmpty();) {\n      const n = this.comparator(t, r.key);\n      if (0 === n) return e + r.left.size;\n      n < 0 ? r = r.left : (\n      // Count all nodes left of the node plus the node itself\n      e += r.left.size + 1, r = r.right);\n    }\n    // Node not found\n    return -1;\n  }\n  isEmpty() {\n    return this.root.isEmpty();\n  }\n  // Returns the total number of nodes in the map.\n  get size() {\n    return this.root.size;\n  }\n  // Returns the minimum key in the map.\n  minKey() {\n    return this.root.minKey();\n  }\n  // Returns the maximum key in the map.\n  maxKey() {\n    return this.root.maxKey();\n  }\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(t) {\n    return this.root.inorderTraversal(t);\n  }\n  forEach(t) {\n    this.inorderTraversal((e, r) => (t(e, r), !1));\n  }\n  toString() {\n    const t = [];\n    return this.inorderTraversal((e, r) => (t.push(`${e}:${r}`), !1)), `{${t.join(\", \")}}`;\n  }\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(t) {\n    return this.root.reverseTraversal(t);\n  }\n  // Returns an iterator over the SortedMap.\n  getIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, !1);\n  }\n  getIteratorFrom(t) {\n    return new SortedMapIterator(this.root, t, this.comparator, !1);\n  }\n  getReverseIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, !0);\n  }\n  getReverseIteratorFrom(t) {\n    return new SortedMapIterator(this.root, t, this.comparator, !0);\n  }\n}\n\n// end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n  constructor(t, e, r, n) {\n    this.isReverse = n, this.nodeStack = [];\n    let i = 1;\n    for (; !t.isEmpty();) if (i = e ? r(t.key, e) : 1,\n    // flip the comparison if we're going in reverse\n    e && n && (i *= -1), i < 0)\n      // This node is less than our start key. ignore it\n      t = this.isReverse ? t.left : t.right;else {\n      if (0 === i) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(t);\n        break;\n      }\n      // This node is greater than our start key, add it to the stack and move\n      // to the next one\n      this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n    }\n  }\n  getNext() {\n    let t = this.nodeStack.pop();\n    const e = {\n      key: t.key,\n      value: t.value\n    };\n    if (this.isReverse) for (t = t.left; !t.isEmpty();) this.nodeStack.push(t), t = t.right;else for (t = t.right; !t.isEmpty();) this.nodeStack.push(t), t = t.left;\n    return e;\n  }\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n  peek() {\n    if (0 === this.nodeStack.length) return null;\n    const t = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: t.key,\n      value: t.value\n    };\n  }\n}\n\n// end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n  constructor(t, e, r, n, i) {\n    this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  }\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(t, e, r, n, i) {\n    return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);\n  }\n  isEmpty() {\n    return !1;\n  }\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(t) {\n    return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n  }\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(t) {\n    return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n  }\n  // Returns the minimum node in the tree.\n  min() {\n    return this.left.isEmpty() ? this : this.left.min();\n  }\n  // Returns the maximum key in the tree.\n  minKey() {\n    return this.min().key;\n  }\n  // Returns the maximum key in the tree.\n  maxKey() {\n    return this.right.isEmpty() ? this.key : this.right.maxKey();\n  }\n  // Returns new tree, with the key/value added.\n  insert(t, e, r) {\n    let n = this;\n    const i = r(t, n.key);\n    return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), n.fixUp();\n  }\n  removeMin() {\n    if (this.left.isEmpty()) return LLRBNode.EMPTY;\n    let t = this;\n    return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();\n  }\n  // Returns new tree, with the specified item removed.\n  remove(t, e) {\n    let r,\n      n = this;\n    if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), n = n.copy(null, null, null, n.left.remove(t, e), null);else {\n      if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), 0 === e(t, n.key)) {\n        if (n.right.isEmpty()) return LLRBNode.EMPTY;\n        r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());\n      }\n      n = n.copy(null, null, null, null, n.right.remove(t, e));\n    }\n    return n.fixUp();\n  }\n  isRed() {\n    return this.color;\n  }\n  // Returns new tree after performing any needed rotations.\n  fixUp() {\n    let t = this;\n    return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n  }\n  moveRedLeft() {\n    let t = this.colorFlip();\n    return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;\n  }\n  moveRedRight() {\n    let t = this.colorFlip();\n    return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n  }\n  rotateLeft() {\n    const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, t, null);\n  }\n  rotateRight() {\n    const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, t);\n  }\n  colorFlip() {\n    const t = this.left.copy(null, null, !this.left.color, null, null),\n      e = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, t, e);\n  }\n  // For testing.\n  checkMaxDepth() {\n    const t = this.check();\n    return Math.pow(2, t) <= this.size + 1;\n  }\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  check() {\n    if (this.isRed() && this.left.isRed()) throw fail();\n    if (this.right.isRed()) throw fail();\n    const t = this.left.check();\n    if (t !== this.right.check()) throw fail();\n    return t + (this.isRed() ? 0 : 1);\n  }\n}\n\n// end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;\n\n// end LLRBEmptyNode\nLLRBNode.EMPTY = new\n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n  constructor() {\n    this.size = 0;\n  }\n  get key() {\n    throw fail();\n  }\n  get value() {\n    throw fail();\n  }\n  get color() {\n    throw fail();\n  }\n  get left() {\n    throw fail();\n  }\n  get right() {\n    throw fail();\n  }\n  // Returns a copy of the current node.\n  copy(t, e, r, n, i) {\n    return this;\n  }\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(t, e, r) {\n    return new LLRBNode(t, e);\n  }\n  // Returns a copy of the tree, with the specified key removed.\n  remove(t, e) {\n    return this;\n  }\n  isEmpty() {\n    return !0;\n  }\n  inorderTraversal(t) {\n    return !1;\n  }\n  reverseTraversal(t) {\n    return !1;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  isRed() {\n    return !1;\n  }\n  // For testing.\n  checkMaxDepth() {\n    return !0;\n  }\n  check() {\n    return 0;\n  }\n}();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n  constructor(t) {\n    this.comparator = t, this.data = new SortedMap(this.comparator);\n  }\n  has(t) {\n    return null !== this.data.get(t);\n  }\n  first() {\n    return this.data.minKey();\n  }\n  last() {\n    return this.data.maxKey();\n  }\n  get size() {\n    return this.data.size;\n  }\n  indexOf(t) {\n    return this.data.indexOf(t);\n  }\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(t) {\n    this.data.inorderTraversal((e, r) => (t(e), !1));\n  }\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  forEachInRange(t, e) {\n    const r = this.data.getIteratorFrom(t[0]);\n    for (; r.hasNext();) {\n      const n = r.getNext();\n      if (this.comparator(n.key, t[1]) >= 0) return;\n      e(n.key);\n    }\n  }\n  /**\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n   */\n  forEachWhile(t, e) {\n    let r;\n    for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext();) {\n      if (!t(r.getNext().key)) return;\n    }\n  }\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(t) {\n    const e = this.data.getIteratorFrom(t);\n    return e.hasNext() ? e.getNext().key : null;\n  }\n  getIterator() {\n    return new SortedSetIterator(this.data.getIterator());\n  }\n  getIteratorFrom(t) {\n    return new SortedSetIterator(this.data.getIteratorFrom(t));\n  }\n  /** Inserts or updates an element */\n  add(t) {\n    return this.copy(this.data.remove(t).insert(t, !0));\n  }\n  /** Deletes an element */\n  delete(t) {\n    return this.has(t) ? this.copy(this.data.remove(t)) : this;\n  }\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n  unionWith(t) {\n    let e = this;\n    // Make sure `result` always refers to the larger one of the two sets.\n    return e.size < t.size && (e = t, t = this), t.forEach(t => {\n      e = e.add(t);\n    }), e;\n  }\n  isEqual(t) {\n    if (!(t instanceof SortedSet)) return !1;\n    if (this.size !== t.size) return !1;\n    const e = this.data.getIterator(),\n      r = t.data.getIterator();\n    for (; e.hasNext();) {\n      const t = e.getNext().key,\n        n = r.getNext().key;\n      if (0 !== this.comparator(t, n)) return !1;\n    }\n    return !0;\n  }\n  toArray() {\n    const t = [];\n    return this.forEach(e => {\n      t.push(e);\n    }), t;\n  }\n  toString() {\n    const t = [];\n    return this.forEach(e => t.push(e)), \"SortedSet(\" + t.toString() + \")\";\n  }\n  copy(t) {\n    const e = new SortedSet(this.comparator);\n    return e.data = t, e;\n  }\n}\nclass SortedSetIterator {\n  constructor(t) {\n    this.iter = t;\n  }\n  getNext() {\n    return this.iter.getNext().key;\n  }\n  hasNext() {\n    return this.iter.hasNext();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nclass FieldMask {\n  constructor(t) {\n    this.fields = t,\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    t.sort(FieldPath$1.comparator);\n  }\n  static empty() {\n    return new FieldMask([]);\n  }\n  /**\n   * Returns a new FieldMask object that is the result of adding all the given\n   * fields paths to this field mask.\n   */\n  unionWith(t) {\n    let e = new SortedSet(FieldPath$1.comparator);\n    for (const t of this.fields) e = e.add(t);\n    for (const r of t) e = e.add(r);\n    return new FieldMask(e.toArray());\n  }\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(t) {\n    for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n    return !1;\n  }\n  isEqual(t) {\n    return __PRIVATE_arrayEquals(this.fields, t.fields, (t, e) => t.isEqual(e));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nclass ObjectValue {\n  constructor(t) {\n    this.value = t;\n  }\n  static empty() {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  }\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path - the path to search\n   * @returns The value at the path or null if the path is not set.\n   */\n  field(t) {\n    if (t.isEmpty()) return this.value;\n    {\n      let e = this.value;\n      for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], !__PRIVATE_isMapValue(e)) return null;\n      return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n    }\n  }\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path - The field path to set.\n   * @param value - The value to set.\n   */\n  set(t, e) {\n    this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);\n  }\n  /**\n   * Sets the provided fields to the provided values.\n   *\n   * @param data - A map of fields to values (or null for deletes).\n   */\n  setAll(t) {\n    let e = FieldPath$1.emptyPath(),\n      r = {},\n      n = [];\n    t.forEach((t, i) => {\n      if (!e.isImmediateParentOf(i)) {\n        // Insert the accumulated changes at this parent location\n        const t = this.getFieldsMap(e);\n        this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();\n      }\n      t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());\n    });\n    const i = this.getFieldsMap(e);\n    this.applyChanges(i, r, n);\n  }\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path - The field path to remove.\n   */\n  delete(t) {\n    const e = this.field(t.popLast());\n    __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n  }\n  isEqual(t) {\n    return __PRIVATE_valueEquals(this.value, t.value);\n  }\n  /**\n   * Returns the map that contains the leaf element of `path`. If the parent\n   * entry does not yet exist, or if it is not a map, a new map will be created.\n   */\n  getFieldsMap(t) {\n    let e = this.value;\n    e.mapValue.fields || (e.mapValue = {\n      fields: {}\n    });\n    for (let r = 0; r < t.length; ++r) {\n      let n = e.mapValue.fields[t.get(r)];\n      __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {\n        mapValue: {\n          fields: {}\n        }\n      }, e.mapValue.fields[t.get(r)] = n), e = n;\n    }\n    return e.mapValue.fields;\n  }\n  /**\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\n   * entries.\n   */\n  applyChanges(t, e, r) {\n    forEach(e, (e, r) => t[e] = r);\n    for (const e of r) delete t[e];\n  }\n  clone() {\n    return new ObjectValue(__PRIVATE_deepClone(this.value));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\nclass MutableDocument {\n  constructor(t, e, r, n, i, s, o) {\n    this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, this.data = s, this.documentState = o;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n  static newInvalidDocument(t) {\n    return new MutableDocument(t, 0 /* DocumentType.INVALID */, /* version */SnapshotVersion.min(), /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist with the given data at the\n   * given version.\n   */\n  static newFoundDocument(t, e, r, n) {\n    return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */r, n, 0 /* DocumentState.SYNCED */);\n  }\n  /** Creates a new document that is known to not exist at the given version. */\n  static newNoDocument(t, e) {\n    return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist at the given version but\n   * whose data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  static newUnknownDocument(t, e) {\n    return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n  }\n  /**\n   * Changes the document type to indicate that it exists and that its version\n   * and data are known.\n   */\n  convertToFoundDocument(t, e) {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */, this.data = e, this.documentState = 0 /* DocumentState.SYNCED */, this;\n  }\n  /**\n   * Changes the document type to indicate that it doesn't exist at the given\n   * version.\n   */\n  convertToNoDocument(t) {\n    return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */, this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */, this;\n  }\n  /**\n   * Changes the document type to indicate that it exists at a given version but\n   * that its data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  convertToUnknownDocument(t) {\n    return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */, this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n  }\n  setHasCommittedMutations() {\n    return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n  }\n  setHasLocalMutations() {\n    return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */, this.version = SnapshotVersion.min(), this;\n  }\n  setReadTime(t) {\n    return this.readTime = t, this;\n  }\n  get hasLocalMutations() {\n    return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n  }\n  get hasCommittedMutations() {\n    return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n  }\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n  isValidDocument() {\n    return 0 /* DocumentType.INVALID */ !== this.documentType;\n  }\n  isFoundDocument() {\n    return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n  }\n  isNoDocument() {\n    return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n  }\n  isUnknownDocument() {\n    return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n  }\n  isEqual(t) {\n    return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n  }\n  mutableCopy() {\n    return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass __PRIVATE_TargetImpl {\n  constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n    this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, this.startAt = s, this.endAt = o, this.C = null;\n  }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nfunction __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n  return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass __PRIVATE_QueryImpl {\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(t, e = null, r = [], n = [], i = null, s = \"F\" /* LimitType.First */, o = null, a = null) {\n    this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.S = null,\n    // The corresponding `Target` of this `Query` instance, for use with\n    // non-aggregate queries.\n    this.N = null,\n    // The corresponding `Target` of this `Query` instance, for use with\n    // aggregate queries. Unlike targets for non-aggregate queries,\n    // aggregate query targets do not contain normalized order-bys, they only\n    // contain explicit order-bys.\n    this.O = null, this.startAt, this.endAt;\n  }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction __PRIVATE_isCollectionGroupQuery(t) {\n  return null !== t.collectionGroup;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */\nfunction __PRIVATE_queryNormalizedOrderBy(t) {\n  const e = __PRIVATE_debugCast(t);\n  if (null === e.S) {\n    e.S = [];\n    const t = new Set();\n    // Any explicit order by fields should be added as is.\n    for (const r of e.explicitOrderBy) e.S.push(r), t.add(r.field.canonicalString());\n    // The order of the implicit ordering always matches the last explicit order by.\n    const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */,\n      n =\n      // Returns the sorted set of inequality filter fields used in this query.\n      function __PRIVATE_getInequalityFilterFields(t) {\n        let e = new SortedSet(FieldPath$1.comparator);\n        return t.filters.forEach(t => {\n          t.getFlattenedFilters().forEach(t => {\n            t.isInequality() && (e = e.add(t.field));\n          });\n        }), e;\n      }\n      /**\n      * Creates a new Query for a collection group query that matches all documents\n      * within the provided collection group.\n      */(e);\n    // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n    // order. When there are multiple inequality filters on the same field, the field should be added\n    // only once.\n    // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n    // field to be sorted last.\n    n.forEach(n => {\n      t.has(n.canonicalString()) || n.isKeyField() || e.S.push(new OrderBy(n, r));\n    }),\n    // Add the document key field to the last if it is not explicitly ordered.\n    t.has(FieldPath$1.keyField().canonicalString()) || e.S.push(new OrderBy(FieldPath$1.keyField(), r));\n  }\n  return e.S;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */\nfunction __PRIVATE_queryToTarget(t) {\n  const e = __PRIVATE_debugCast(t);\n  return e.N || (e.N = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), e.N;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */\nfunction __PRIVATE__queryToTarget(t, e) {\n  if (\"F\" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);\n  {\n    // Flip the orderBy directions since we want the last results\n    e = e.map(t => {\n      const e = \"desc\" /* Direction.DESCENDING */ === t.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n      return new OrderBy(t.field, e);\n    });\n    // We need to swap the cursors to match the now-flipped query ordering.\n    const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null,\n      n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;\n    // Now return as a LimitType.First query.\n    return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);\n  }\n}\nfunction __PRIVATE_queryWithAddedFilter(t, e) {\n  const r = t.filters.concat([e]);\n  return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);\n}\nfunction __PRIVATE_queryEquals(t, e) {\n  return function __PRIVATE_targetEquals(t, e) {\n    if (t.limit !== e.limit) return !1;\n    if (t.orderBy.length !== e.orderBy.length) return !1;\n    for (let r = 0; r < t.orderBy.length; r++) if (!__PRIVATE_orderByEquals(t.orderBy[r], e.orderBy[r])) return !1;\n    if (t.filters.length !== e.filters.length) return !1;\n    for (let r = 0; r < t.filters.length; r++) if (!__PRIVATE_filterEquals(t.filters[r], e.filters[r])) return !1;\n    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!__PRIVATE_boundEquals(t.startAt, e.startAt) && __PRIVATE_boundEquals(t.endAt, e.endAt);\n  }(__PRIVATE_queryToTarget(t), __PRIVATE_queryToTarget(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(t, e) {\n  return function isSafeInteger(t) {\n    return \"number\" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n  }(e) ?\n  /**\n  * Returns an IntegerValue for `value`.\n  */\n  function __PRIVATE_toInteger(t) {\n    return {\n      integerValue: \"\" + t\n    };\n  }(e) : function __PRIVATE_toDouble(t, e) {\n    if (t.useProto3Json) {\n      if (isNaN(e)) return {\n        doubleValue: \"NaN\"\n      };\n      if (e === 1 / 0) return {\n        doubleValue: \"Infinity\"\n      };\n      if (e === -1 / 0) return {\n        doubleValue: \"-Infinity\"\n      };\n    }\n    return {\n      doubleValue: __PRIVATE_isNegativeZero(e) ? \"-0\" : e\n    };\n  }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */\nclass TransformOperation {\n  constructor() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = void 0;\n  }\n}\n\n/** Transforms a value into a server-generated timestamp. */\nclass __PRIVATE_ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nclass __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nclass __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nclass __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {\n  constructor(t, e) {\n    super(), this.serializer = t, this.q = e;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */\nclass FieldTransform {\n  constructor(t, e) {\n    this.field = t, this.transform = e;\n  }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nclass Precondition {\n  constructor(t, e) {\n    this.updateTime = t, this.exists = e;\n  }\n  /** Creates a new empty Precondition. */\n  static none() {\n    return new Precondition();\n  }\n  /** Creates a new Precondition with an exists flag. */\n  static exists(t) {\n    return new Precondition(void 0, t);\n  }\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(t) {\n    return new Precondition(t);\n  }\n  /** Returns whether this Precondition is empty. */\n  get isNone() {\n    return void 0 === this.updateTime && void 0 === this.exists;\n  }\n  isEqual(t) {\n    return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\nclass Mutation {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nclass __PRIVATE_SetMutation extends Mutation {\n  constructor(t, e, r, n = []) {\n    super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, this.type = 0 /* MutationType.Set */;\n  }\n\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nclass __PRIVATE_PatchMutation extends Mutation {\n  constructor(t, e, r, n, i = []) {\n    super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;\n  }\n\n  getFieldMask() {\n    return this.fieldMask;\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nclass __PRIVATE_DeleteMutation extends Mutation {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nclass __PRIVATE_VerifyMutation extends Mutation {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst L = (() => {\n    const t = {\n      asc: \"ASCENDING\",\n      desc: \"DESCENDING\"\n    };\n    return t;\n  })(),\n  M = (() => {\n    const t = {\n      \"<\": \"LESS_THAN\",\n      \"<=\": \"LESS_THAN_OR_EQUAL\",\n      \">\": \"GREATER_THAN\",\n      \">=\": \"GREATER_THAN_OR_EQUAL\",\n      \"==\": \"EQUAL\",\n      \"!=\": \"NOT_EQUAL\",\n      \"array-contains\": \"ARRAY_CONTAINS\",\n      in: \"IN\",\n      \"not-in\": \"NOT_IN\",\n      \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n  })(),\n  x = (() => {\n    const t = {\n      and: \"AND\",\n      or: \"OR\"\n    };\n    return t;\n  })();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n  constructor(t, e) {\n    this.databaseId = t, this.useProto3Json = e;\n  }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(t, e) {\n  if (t.useProto3Json) {\n    return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n  }\n  return {\n    seconds: \"\" + e.seconds,\n    nanos: e.nanoseconds\n  };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction __PRIVATE_toBytes(t, e) {\n  return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\nfunction __PRIVATE_toVersion(t, e) {\n  return toTimestamp(t, e.toTimestamp());\n}\nfunction __PRIVATE_fromVersion(t) {\n  return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {\n    const e = __PRIVATE_normalizeTimestamp(t);\n    return new Timestamp(e.seconds, e.nanos);\n  }(t));\n}\nfunction __PRIVATE_toResourceName(t, e) {\n  return function __PRIVATE_fullyQualifiedPrefixPath(t) {\n    return new ResourcePath([\"projects\", t.projectId, \"databases\", t.database]);\n  }(t).child(\"documents\").child(e).canonicalString();\n}\nfunction __PRIVATE_toName(t, e) {\n  return __PRIVATE_toResourceName(t.databaseId, e.path);\n}\nfunction fromName(t, e) {\n  const r = function __PRIVATE_fromResourceName(t) {\n    const e = ResourcePath.fromString(t);\n    return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;\n  }(e);\n  if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, \"Tried to deserialize key from different project: \" + r.get(1) + \" vs \" + t.databaseId.projectId);\n  if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, \"Tried to deserialize key from different database: \" + r.get(3) + \" vs \" + t.databaseId.database);\n  return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {\n    return __PRIVATE_hardAssert(t.length > 4 && \"documents\" === t.get(4)), t.popFirst(5);\n  }\n  /** Creates a Document proto from key and fields (but no create/update time) */(r));\n}\nfunction __PRIVATE_toQueryPath(t, e) {\n  return __PRIVATE_toResourceName(t.databaseId, e);\n}\nfunction __PRIVATE_getEncodedDatabaseId(t) {\n  return new ResourcePath([\"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database]).canonicalString();\n}\nfunction __PRIVATE_toMutationDocument(t, e, r) {\n  return {\n    name: __PRIVATE_toName(t, e),\n    fields: r.value.mapValue.fields\n  };\n}\nfunction __PRIVATE_fromBatchGetDocumentsResponse(t, e) {\n  return \"found\" in e ? function __PRIVATE_fromFound(t, e) {\n    __PRIVATE_hardAssert(!!e.found), e.found.name, e.found.updateTime;\n    const r = fromName(t, e.found.name),\n      n = __PRIVATE_fromVersion(e.found.updateTime),\n      i = e.found.createTime ? __PRIVATE_fromVersion(e.found.createTime) : SnapshotVersion.min(),\n      s = new ObjectValue({\n        mapValue: {\n          fields: e.found.fields\n        }\n      });\n    return MutableDocument.newFoundDocument(r, n, i, s);\n  }(t, e) : \"missing\" in e ? function __PRIVATE_fromMissing(t, e) {\n    __PRIVATE_hardAssert(!!e.missing), __PRIVATE_hardAssert(!!e.readTime);\n    const r = fromName(t, e.missing),\n      n = __PRIVATE_fromVersion(e.readTime);\n    return MutableDocument.newNoDocument(r, n);\n  }(t, e) : fail();\n}\nfunction toMutation(t, e) {\n  let r;\n  if (e instanceof __PRIVATE_SetMutation) r = {\n    update: __PRIVATE_toMutationDocument(t, e.key, e.value)\n  };else if (e instanceof __PRIVATE_DeleteMutation) r = {\n    delete: __PRIVATE_toName(t, e.key)\n  };else if (e instanceof __PRIVATE_PatchMutation) r = {\n    update: __PRIVATE_toMutationDocument(t, e.key, e.data),\n    updateMask: __PRIVATE_toDocumentMask(e.fieldMask)\n  };else {\n    if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();\n    r = {\n      verify: __PRIVATE_toName(t, e.key)\n    };\n  }\n  return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map(t => function __PRIVATE_toFieldTransform(t, e) {\n    const r = e.transform;\n    if (r instanceof __PRIVATE_ServerTimestampTransform) return {\n      fieldPath: e.field.canonicalString(),\n      setToServerValue: \"REQUEST_TIME\"\n    };\n    if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      appendMissingElements: {\n        values: r.elements\n      }\n    };\n    if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      removeAllFromArray: {\n        values: r.elements\n      }\n    };\n    if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      increment: r.q\n    };\n    throw fail();\n  }(0, t))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {\n    return void 0 !== e.updateTime ? {\n      updateTime: __PRIVATE_toVersion(t, e.updateTime)\n    } : void 0 !== e.exists ? {\n      exists: e.exists\n    } : fail();\n  }(t, e.precondition)), r;\n}\nfunction __PRIVATE_toQueryTarget(t, e) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const r = {\n      structuredQuery: {}\n    },\n    n = e.path;\n  null !== e.collectionGroup ? (r.parent = __PRIVATE_toQueryPath(t, n), r.structuredQuery.from = [{\n    collectionId: e.collectionGroup,\n    allDescendants: !0\n  }]) : (r.parent = __PRIVATE_toQueryPath(t, n.popLast()), r.structuredQuery.from = [{\n    collectionId: n.lastSegment()\n  }]);\n  const i = function __PRIVATE_toFilters(t) {\n    if (0 === t.length) return;\n    return __PRIVATE_toFilter(CompositeFilter.create(t, \"and\" /* CompositeOperator.AND */));\n  }(e.filters);\n  i && (r.structuredQuery.where = i);\n  const s = function __PRIVATE_toOrder(t) {\n    if (0 === t.length) return;\n    return t.map(t =>\n    // visible for testing\n    function __PRIVATE_toPropertyOrder(t) {\n      return {\n        field: __PRIVATE_toFieldPathReference(t.field),\n        direction: __PRIVATE_toDirection(t.dir)\n      };\n    }\n    // visible for testing\n    (t));\n  }(e.orderBy);\n  s && (r.structuredQuery.orderBy = s);\n  const o = function __PRIVATE_toInt32Proto(t, e) {\n    return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {\n      value: e\n    };\n  }(t, e.limit);\n  return null !== o && (r.structuredQuery.limit = o), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {\n    return {\n      before: t.inclusive,\n      values: t.position\n    };\n  }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {\n    return {\n      before: !t.inclusive,\n      values: t.position\n    };\n  }\n  // visible for testing\n  (e.endAt)), r;\n}\nfunction __PRIVATE_toDirection(t) {\n  return L[t];\n}\n\n// visible for testing\nfunction __PRIVATE_toOperatorName(t) {\n  return M[t];\n}\nfunction __PRIVATE_toCompositeOperatorName(t) {\n  return x[t];\n}\nfunction __PRIVATE_toFieldPathReference(t) {\n  return {\n    fieldPath: t.canonicalString()\n  };\n}\nfunction __PRIVATE_toFilter(t) {\n  return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {\n    if (\"==\" /* Operator.EQUAL */ === t.op) {\n      if (__PRIVATE_isNanValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NULL\"\n        }\n      };\n    } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n      if (__PRIVATE_isNanValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NOT_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NOT_NULL\"\n        }\n      };\n    }\n    return {\n      fieldFilter: {\n        field: __PRIVATE_toFieldPathReference(t.field),\n        op: __PRIVATE_toOperatorName(t.op),\n        value: t.value\n      }\n    };\n  }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {\n    const e = t.getFilters().map(t => __PRIVATE_toFilter(t));\n    if (1 === e.length) return e[0];\n    return {\n      compositeFilter: {\n        op: __PRIVATE_toCompositeOperatorName(t.op),\n        filters: e\n      }\n    };\n  }(t) : fail();\n}\nfunction __PRIVATE_toDocumentMask(t) {\n  const e = [];\n  return t.fields.forEach(t => e.push(t.canonicalString())), {\n    fieldPaths: e\n  };\n}\nfunction __PRIVATE_isValidResourceName(t) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_newSerializer(t) {\n  return new JsonProtoSerializer(t, /* useProto3Json= */!0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass __PRIVATE_ExponentialBackoff {\n  constructor(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  t,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  e,\n  /**\n   * The initial delay (used as the base delay on the first retry attempt).\n   * Note that jitter will still be applied, so the actual delay could be as\n   * little as 0.5*initialDelayMs.\n   */\n  r = 1e3\n  /**\n   * The multiplier to use to determine the extended base delay after each\n   * attempt.\n   */, n = 1.5\n  /**\n   * The maximum base delay after which no further backoff is performed.\n   * Note that jitter will still be applied, so the actual delay could be as\n   * much as 1.5*maxDelayMs.\n   */, i = 6e4) {\n    this.B = t, this.timerId = e, this.$ = r, this.L = n, this.M = i, this.k = 0, this.U = null, /** The last backoff attempt, as epoch milliseconds. */\n    this.j = Date.now(), this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset() {\n    this.k = 0;\n  }\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  W() {\n    this.k = this.M;\n  }\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  K(t) {\n    // Cancel any pending backoff operation.\n    this.cancel();\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const e = Math.floor(this.k + this.G()),\n      r = Math.max(0, Date.now() - this.j),\n      n = Math.max(0, e - r);\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    n > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${n} ms (base delay: ${this.k} ms, delay with jitter: ${e} ms, last attempt: ${r} ms ago)`), this.U = this.B.enqueueAfterDelay(this.timerId, n, () => (this.j = Date.now(), t())),\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.k *= this.L, this.k < this.$ && (this.k = this.$), this.k > this.M && (this.k = this.M);\n  }\n  H() {\n    null !== this.U && (this.U.skipDelay(), this.U = null);\n  }\n  cancel() {\n    null !== this.U && (this.U.cancel(), this.U = null);\n  }\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  G() {\n    return (Math.random() - .5) * this.k;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass __PRIVATE_DatastoreImpl extends class Datastore {} {\n  constructor(t, e, r, n) {\n    super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, this.serializer = n, this.J = !1;\n  }\n  Y() {\n    if (this.J) throw new FirestoreError(w, \"The client has already been terminated.\");\n  }\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n  R(t, e, r) {\n    return this.Y(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([n, i]) => this.connection.R(t, e, r, n, i)).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n    });\n  }\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  g(t, e, r, n) {\n    return this.Y(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, s]) => this.connection.g(t, e, r, i, s, n)).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n    });\n  }\n  terminate() {\n    this.J = !0;\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function __PRIVATE_invokeCommitRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    n = __PRIVATE_getEncodedDatabaseId(r.serializer) + \"/documents\",\n    i = {\n      writes: e.map(t => toMutation(r.serializer, t))\n    };\n  await r.R(\"Commit\", n, i);\n}\nasync function __PRIVATE_invokeBatchGetDocumentsRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    n = __PRIVATE_getEncodedDatabaseId(r.serializer) + \"/documents\",\n    i = {\n      documents: e.map(t => __PRIVATE_toName(r.serializer, t))\n    },\n    s = await r.g(\"BatchGetDocuments\", n, i, e.length),\n    o = new Map();\n  s.forEach(t => {\n    const e = __PRIVATE_fromBatchGetDocumentsResponse(r.serializer, t);\n    o.set(e.key.toString(), e);\n  });\n  const a = [];\n  return e.forEach(t => {\n    const e = o.get(t.toString());\n    __PRIVATE_hardAssert(!!e), a.push(e);\n  }), a;\n}\nasync function __PRIVATE_invokeRunQueryRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    n = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));\n  return (await r.g(\"RunQuery\", n.parent, {\n    structuredQuery: n.structuredQuery\n  })).filter(t => !!t.document).map(t => function __PRIVATE_fromDocument(t, e, r) {\n    const n = fromName(t, e.name),\n      i = __PRIVATE_fromVersion(e.updateTime),\n      s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(),\n      o = new ObjectValue({\n        mapValue: {\n          fields: e.fields\n        }\n      }),\n      a = MutableDocument.newFoundDocument(n, i, s, o);\n    return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;\n  }(r.serializer, t.document, void 0));\n}\nasync function __PRIVATE_invokeRunAggregationQueryRpc(t, e, r) {\n  var n;\n  const i = __PRIVATE_debugCast(t),\n    {\n      request: s,\n      Z: o\n    } = function __PRIVATE_toRunAggregationQueryRequest(t, e, r) {\n      const n = __PRIVATE_toQueryTarget(t, e),\n        i = {},\n        s = [];\n      let o = 0;\n      return r.forEach(t => {\n        // Map all client-side aliases to a unique short-form\n        // alias. This avoids issues with client-side aliases that\n        // exceed the 1500-byte string size limit.\n        const e = \"aggregate_\" + o++;\n        i[e] = t.alias, \"count\" === t.aggregateType ? s.push({\n          alias: e,\n          count: {}\n        }) : \"avg\" === t.aggregateType ? s.push({\n          alias: e,\n          avg: {\n            field: __PRIVATE_toFieldPathReference(t.fieldPath)\n          }\n        }) : \"sum\" === t.aggregateType && s.push({\n          alias: e,\n          sum: {\n            field: __PRIVATE_toFieldPathReference(t.fieldPath)\n          }\n        });\n      }), {\n        request: {\n          structuredAggregationQuery: {\n            aggregations: s,\n            structuredQuery: n.structuredQuery\n          },\n          parent: n.parent\n        },\n        Z: i\n      };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(t) {\n      const e = __PRIVATE_debugCast(t);\n      return e.O || (\n      // Do not include implicit order-bys for aggregate queries.\n      e.O = __PRIVATE__queryToTarget(e, t.explicitOrderBy)), e.O;\n    }(e), r),\n    a = s.parent;\n  i.connection.P || delete s.parent;\n  const u = (await i.g(\"RunAggregationQuery\", a, s, /*expectedResponseCount=*/1)).filter(t => !!t.result);\n  // Omit RunAggregationQueryResponse that only contain readTimes.\n  __PRIVATE_hardAssert(1 === u.length);\n  // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n  const _ = null === (n = u[0].result) || void 0 === n ? void 0 : n.aggregateFields;\n  return Object.keys(_).reduce((t, e) => (t[o[e]] = _[e], t), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst k = new Map();\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction __PRIVATE_getDatastore(t) {\n  if (t._terminated) throw new FirestoreError(w, \"The client has already been terminated.\");\n  if (!k.has(t)) {\n    __PRIVATE_logDebug(\"ComponentProvider\", \"Initializing Datastore\");\n    const e = function __PRIVATE_newConnection(t) {\n        return new __PRIVATE_FetchConnection(t, fetch.bind(null));\n      }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {\n        return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);\n      }\n      /**\n      * @license\n      * Copyright 2018 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */(t._databaseId, t.app.options.appId || \"\", t._persistenceKey, t._freezeSettings())),\n      r = __PRIVATE_newSerializer(t._databaseId),\n      n = function __PRIVATE_newDatastore(t, e, r, n) {\n        return new __PRIVATE_DatastoreImpl(t, e, r, n);\n      }(t._authCredentials, t._appCheckCredentials, e, r);\n    k.set(t, n);\n  }\n  return k.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n  constructor(t) {\n    var e, r;\n    if (void 0 === t.host) {\n      if (void 0 !== t.ssl) throw new FirestoreError(T, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = t.cacheSizeBytes;\n    }\n    !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {\n      if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);\n    }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true :\n    // For backwards compatibility, coerce the value to boolean even though\n    // the TypeScript compiler has narrowed the type to boolean already.\n    // noinspection PointlessBooleanExpressionJS\n    this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), function __PRIVATE_validateLongPollingOptions(t) {\n      if (void 0 !== t.timeoutSeconds) {\n        if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n        if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n        if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n      }\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n    * The Cloud Firestore service interface.\n    *\n    * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n    */(this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n  }\n  isEqual(t) {\n    return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {\n      return t.timeoutSeconds === e.timeoutSeconds;\n    }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n  }\n}\nclass Firestore {\n  /** @hideconstructor */\n  constructor(t, e, r, n) {\n    this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, this._app = n,\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = !1;\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n  get app() {\n    if (!this._app) throw new FirestoreError(w, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n    return this._app;\n  }\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n  get _terminated() {\n    return void 0 !== this._terminateTask;\n  }\n  _setSettings(t) {\n    if (this._settingsFrozen) throw new FirestoreError(w, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n    this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {\n      if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider();\n      switch (t.type) {\n        case \"firstParty\":\n          return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n        case \"provider\":\n          return t.client;\n        default:\n          throw new FirestoreError(T, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n      }\n    }(t.credentials));\n  }\n  _getSettings() {\n    return this._settings;\n  }\n  _freezeSettings() {\n    return this._settingsFrozen = !0, this._settings;\n  }\n  _delete() {\n    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n  }\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  _terminate() {\n    return function __PRIVATE_removeComponents(t) {\n      const e = k.get(t);\n      e && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), k.delete(t), e.terminate());\n    }(this), Promise.resolve();\n  }\n}\nfunction initializeFirestore(t, e, r) {\n  r || (r = \"(default)\");\n  const n = _getProvider(t, \"firestore/lite\");\n  if (n.isInitialized(r)) throw new FirestoreError(w, \"Firestore can only be initialized once per app.\");\n  return n.initialize({\n    options: e,\n    instanceIdentifier: r\n  });\n}\nfunction getFirestore(e, r) {\n  const n = \"object\" == typeof e ? e : getApp(),\n    i = \"string\" == typeof e ? e : r || \"(default)\",\n    s = _getProvider(n, \"firestore/lite\").getImmediate({\n      identifier: i\n    });\n  if (!s._initialized) {\n    const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n    t && connectFirestoreEmulator(s, ...t);\n  }\n  return s;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\nfunction connectFirestoreEmulator(t, e, r, n = {}) {\n  var i;\n  const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(),\n    o = `${e}:${r}`;\n  if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), t._setSettings(Object.assign(Object.assign({}, s), {\n    host: o,\n    ssl: !1\n  })), n.mockUserToken) {\n    let e, r;\n    if (\"string\" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER;else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);\n      const s = n.mockUserToken.sub || n.mockUserToken.user_id;\n      if (!s) throw new FirestoreError(T, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      r = new User(s);\n    }\n    t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));\n  }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\nfunction terminate(t) {\n  return t = __PRIVATE_cast(t, Firestore), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n  /**\n   * Create a new AggregateField<T>\n   * @param aggregateType Specifies the type of aggregation operation to perform.\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\n   * @internal\n   */\n  constructor(t = \"count\", e) {\n    this._internalFieldPath = e, /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateField\", this.aggregateType = t;\n  }\n}\n\n/**\n * The results of executing an aggregation query.\n */\nclass AggregateQuerySnapshot {\n  /** @hideconstructor */\n  constructor(t, e, r) {\n    this._userDataWriter = e, this._data = r, /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateQuerySnapshot\", this.query = t;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\nclass Query {\n  // This is the lite version of the Query class in the main SDK.\n  /** @hideconstructor protected */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, r) {\n    this.converter = e, this._query = r, /** The type of this Firestore reference. */\n    this.type = \"query\", this.firestore = t;\n  }\n  withConverter(t) {\n    return new Query(this.firestore, t, this._query);\n  }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass DocumentReference {\n  /** @hideconstructor */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, r) {\n    this.converter = e, this._key = r, /** The type of this Firestore reference. */\n    this.type = \"document\", this.firestore = t;\n  }\n  get _path() {\n    return this._key.path;\n  }\n  /**\n   * The document's identifier within its collection.\n   */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  /**\n   * The collection this `DocumentReference` belongs to.\n   */\n  get parent() {\n    return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n  }\n  withConverter(t) {\n    return new DocumentReference(this.firestore, t, this._key);\n  }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */\nclass CollectionReference extends Query {\n  /** @hideconstructor */\n  constructor(t, e, r) {\n    super(t, e, function __PRIVATE_newQueryForPath(t) {\n      return new __PRIVATE_QueryImpl(t);\n    }(r)), this._path = r, /** The type of this Firestore reference. */\n    this.type = \"collection\";\n  }\n  /** The collection's identifier. */\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  /**\n   * A reference to the containing `DocumentReference` if this is a\n   * subcollection. If this isn't a subcollection, the reference is null.\n   */\n  get parent() {\n    const t = this._path.popLast();\n    return t.isEmpty() ? null : new DocumentReference(this.firestore, /* converter= */null, new DocumentKey(t));\n  }\n  withConverter(t) {\n    return new CollectionReference(this.firestore, t, this._path);\n  }\n}\nfunction collection(t, e, ...r) {\n  if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", e), t instanceof Firestore) {\n    const n = ResourcePath.fromString(e, ...r);\n    return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */null, n);\n  }\n  {\n    if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const n = t._path.child(ResourcePath.fromString(e, ...r));\n    return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, /* converter= */null, n);\n  }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\nfunction collectionGroup(t, e) {\n  if (t = __PRIVATE_cast(t, Firestore), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new FirestoreError(T, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n  return new Query(t, /* converter= */null, function __PRIVATE_newQueryForCollectionGroup(t) {\n    return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), t);\n  }(e));\n}\nfunction doc(t, e, ...r) {\n  if (t = getModularInstance(t),\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  1 === arguments.length && (e = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", e), t instanceof Firestore) {\n    const n = ResourcePath.fromString(e, ...r);\n    return __PRIVATE_validateDocumentPath(n), new DocumentReference(t, /* converter= */null, new DocumentKey(n));\n  }\n  {\n    if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const n = t._path.child(ResourcePath.fromString(e, ...r));\n    return __PRIVATE_validateDocumentPath(n), new DocumentReference(t.firestore, t instanceof CollectionReference ? t.converter : null, new DocumentKey(n));\n  }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction refEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof DocumentReference || t instanceof CollectionReference) && (e instanceof DocumentReference || e instanceof CollectionReference) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction queryEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Query && e instanceof Query && t.firestore === e.firestore && __PRIVATE_queryEquals(t._query, e._query) && t.converter === e.converter;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */\nclass Bytes {\n  /** @hideconstructor */\n  constructor(t) {\n    this._byteString = t;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n  static fromBase64String(t) {\n    try {\n      return new Bytes(ByteString.fromBase64String(t));\n    } catch (t) {\n      throw new FirestoreError(T, \"Failed to construct data from Base64 string: \" + t);\n    }\n  }\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array - The Uint8Array used to create the `Bytes` object.\n   */\n  static fromUint8Array(t) {\n    return new Bytes(ByteString.fromUint8Array(t));\n  }\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @returns The Base64-encoded string created from the `Bytes` object.\n   */\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @returns The Uint8Array created from the `Bytes` object.\n   */\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @returns A string representation of the `Bytes` object.\n   */\n  toString() {\n    return \"Bytes(base64: \" + this.toBase64() + \")\";\n  }\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other - The `Bytes` object to compare against.\n   * @returns true if this `Bytes` object is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._byteString.isEqual(t._byteString);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\nclass FieldPath {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...t) {\n    for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n    this._internalPath = new FieldPath$1(t);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._internalPath.isEqual(t._internalPath);\n  }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\nfunction documentId() {\n  return new FieldPath(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nclass FieldValue {\n  /**\n   * @param _methodName - The public API endpoint that returns this class.\n   * @hideconstructor\n   */\n  constructor(t) {\n    this._methodName = t;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nclass GeoPoint {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  constructor(t, e) {\n    if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, \"Latitude must be a number between -90 and 90, but was: \" + t);\n    if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, \"Longitude must be a number between -180 and 180, but was: \" + e);\n    this._lat = t, this._long = e;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  get latitude() {\n    return this._lat;\n  }\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n  get longitude() {\n    return this._long;\n  }\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other - The `GeoPoint` to compare against.\n   * @returns true if this `GeoPoint` is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._lat === t._lat && this._long === t._long;\n  }\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(t) {\n    return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst U = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */\nclass ParsedSetData {\n  constructor(t, e, r) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n  }\n  toMutation(t, e) {\n    return null !== this.fieldMask ? new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms) : new __PRIVATE_SetMutation(t, this.data, e, this.fieldTransforms);\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nclass ParsedUpdateData {\n  constructor(t,\n  // The fieldMask does not include document transforms.\n  e, r) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n  }\n  toMutation(t, e) {\n    return new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms);\n  }\n}\nfunction __PRIVATE_isWrite(t) {\n  switch (t) {\n    case 0 /* UserDataSource.Set */:\n    // fall through\n    case 2 /* UserDataSource.MergeSet */:\n    // fall through\n    case 1 /* UserDataSource.Update */:\n      return !0;\n    case 3 /* UserDataSource.Argument */:\n    case 4 /* UserDataSource.ArrayArgument */:\n      return !1;\n    default:\n      throw fail();\n  }\n}\n\n/** A \"context\" object passed around while parsing user data. */\nclass __PRIVATE_ParseContextImpl {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(t, e, r, n, i, s) {\n    this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n,\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    void 0 === i && this.X(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n  }\n  get path() {\n    return this.settings.path;\n  }\n  get tt() {\n    return this.settings.tt;\n  }\n  /** Returns a new context with the specified settings overwritten. */\n  et(t) {\n    return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n  rt(t) {\n    var e;\n    const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n      n = this.et({\n        path: r,\n        nt: !1\n      });\n    return n.it(t), n;\n  }\n  st(t) {\n    var e;\n    const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n      n = this.et({\n        path: r,\n        nt: !1\n      });\n    return n.X(), n;\n  }\n  ot(t) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.et({\n      path: void 0,\n      nt: !0\n    });\n  }\n  ut(t) {\n    return __PRIVATE_createError(t, this.settings.methodName, this.settings._t || !1, this.path, this.settings.ct);\n  }\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(t) {\n    return void 0 !== this.fieldMask.find(e => t.isPrefixOf(e)) || void 0 !== this.fieldTransforms.find(e => t.isPrefixOf(e.field));\n  }\n  X() {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (this.path) for (let t = 0; t < this.path.length; t++) this.it(this.path.get(t));\n  }\n  it(t) {\n    if (0 === t.length) throw this.ut(\"Document fields must not be empty\");\n    if (__PRIVATE_isWrite(this.tt) && U.test(t)) throw this.ut('Document fields cannot begin and end with \"__\"');\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nclass __PRIVATE_UserDataReader {\n  constructor(t, e, r) {\n    this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);\n  }\n  /** Creates a new top-level parse context. */\n  lt(t, e, r, n = !1) {\n    return new __PRIVATE_ParseContextImpl({\n      tt: t,\n      methodName: e,\n      ct: r,\n      path: FieldPath$1.emptyPath(),\n      nt: !1,\n      _t: n\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n}\nfunction __PRIVATE_newUserDataReader(t) {\n  const e = t._freezeSettings(),\n    r = __PRIVATE_newSerializer(t._databaseId);\n  return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);\n}\n\n/** Parse document data from a set() call. */\nfunction __PRIVATE_parseSetData(t, e, r, n, i, s = {}) {\n  const o = t.lt(s.merge || s.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */, e, r, i);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, n);\n  const a = __PRIVATE_parseObject(n, o);\n  let u, _;\n  if (s.merge) u = new FieldMask(o.fieldMask), _ = o.fieldTransforms;else if (s.mergeFields) {\n    const t = [];\n    for (const n of s.mergeFields) {\n      const i = __PRIVATE_fieldPathFromArgument$1(e, n, r);\n      if (!o.contains(i)) throw new FirestoreError(T, `Field '${i}' is specified in your field mask but missing from your input data.`);\n      __PRIVATE_fieldMaskContains(t, i) || t.push(i);\n    }\n    u = new FieldMask(t), _ = o.fieldTransforms.filter(t => u.covers(t.field));\n  } else u = null, _ = o.fieldTransforms;\n  return new ParsedSetData(new ObjectValue(a), u, _);\n}\nclass __PRIVATE_DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(t) {\n    if (2 /* UserDataSource.MergeSet */ !== t.tt) throw 1 /* UserDataSource.Update */ === t.tt ? t.ut(`${this._methodName}() can only appear at the top level of your update data`) : t.ut(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n    // No transform to add for a delete, but we need to add it to our\n    // fieldMask so it gets deleted.\n    return t.fieldMask.push(t.path), null;\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\nfunction __PRIVATE_createSentinelChildContext(t, e, r) {\n  return new __PRIVATE_ParseContextImpl({\n    tt: 3 /* UserDataSource.Argument */,\n    ct: e.settings.ct,\n    methodName: t._methodName,\n    nt: r\n  }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\nclass __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(t) {\n    return new FieldTransform(t.path, new __PRIVATE_ServerTimestampTransform());\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n  }\n}\nclass __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.ht = e;\n  }\n  _toFieldTransform(t) {\n    const e = __PRIVATE_createSentinelChildContext(this, t, /*array=*/!0),\n      r = this.ht.map(t => __PRIVATE_parseData(t, e)),\n      n = new __PRIVATE_ArrayUnionTransformOperation(r);\n    return new FieldTransform(t.path, n);\n  }\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n}\nclass __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.ht = e;\n  }\n  _toFieldTransform(t) {\n    const e = __PRIVATE_createSentinelChildContext(this, t, /*array=*/!0),\n      r = this.ht.map(t => __PRIVATE_parseData(t, e)),\n      n = new __PRIVATE_ArrayRemoveTransformOperation(r);\n    return new FieldTransform(t.path, n);\n  }\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n}\nclass __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.dt = e;\n  }\n  _toFieldTransform(t) {\n    const e = new __PRIVATE_NumericIncrementTransformOperation(t.serializer, toNumber(t.serializer, this.dt));\n    return new FieldTransform(t.path, e);\n  }\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n}\n\n/** Parse update data from an update() call. */\nfunction __PRIVATE_parseUpdateData(t, e, r, n) {\n  const i = t.lt(1 /* UserDataSource.Update */, e, r);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, n);\n  const s = [],\n    o = ObjectValue.empty();\n  forEach(n, (t, n) => {\n    const a = __PRIVATE_fieldPathFromDotSeparatedString(e, t, r);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    n = getModularInstance(n);\n    const u = i.st(a);\n    if (n instanceof __PRIVATE_DeleteFieldValueImpl)\n      // Add it to the field mask, but don't add anything to updateData.\n      s.push(a);else {\n      const t = __PRIVATE_parseData(n, u);\n      null != t && (s.push(a), o.set(a, t));\n    }\n  });\n  const a = new FieldMask(s);\n  return new ParsedUpdateData(o, a, i.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */\nfunction __PRIVATE_parseUpdateVarargs(t, e, r, n, i, s) {\n  const o = t.lt(1 /* UserDataSource.Update */, e, r),\n    a = [__PRIVATE_fieldPathFromArgument$1(e, n, r)],\n    u = [i];\n  if (s.length % 2 != 0) throw new FirestoreError(T, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n  for (let t = 0; t < s.length; t += 2) a.push(__PRIVATE_fieldPathFromArgument$1(e, s[t])), u.push(s[t + 1]);\n  const _ = [],\n    c = ObjectValue.empty();\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let t = a.length - 1; t >= 0; --t) if (!__PRIVATE_fieldMaskContains(_, a[t])) {\n    const e = a[t];\n    let r = u[t];\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    r = getModularInstance(r);\n    const n = o.st(e);\n    if (r instanceof __PRIVATE_DeleteFieldValueImpl)\n      // Add it to the field mask, but don't add anything to updateData.\n      _.push(e);else {\n      const t = __PRIVATE_parseData(r, n);\n      null != t && (_.push(e), c.set(e, t));\n    }\n  }\n  const h = new FieldMask(_);\n  return new ParsedUpdateData(c, h, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nfunction __PRIVATE_parseQueryValue(t, e, r, n = !1) {\n  return __PRIVATE_parseData(r, t.lt(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nfunction __PRIVATE_parseData(t, e) {\n  if (__PRIVATE_looksLikeJsonObject(\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  t = getModularInstance(t))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", e, t), __PRIVATE_parseObject(t, e);\n  if (t instanceof FieldValue)\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n    * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n    * context.fieldTransforms.\n    */\n    return function __PRIVATE_parseSentinelFieldValue(t, e) {\n      // Sentinels are only supported with writes, and not within arrays.\n      if (!__PRIVATE_isWrite(e.tt)) throw e.ut(`${t._methodName}() can only be used with update() and set()`);\n      if (!e.path) throw e.ut(`${t._methodName}() is not currently supported inside arrays`);\n      const r = t._toFieldTransform(e);\n      r && e.fieldTransforms.push(r);\n    }\n    /**\n    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n    *\n    * @returns The parsed value\n    */(t, e), null;\n  if (void 0 === t && e.ignoreUndefinedProperties)\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  if (\n  // If context.path is null we are inside an array and we don't support\n  // field mask paths more granular than the top-level array.\n  e.path && e.fieldMask.push(e.path), t instanceof Array) {\n    // TODO(b/34871131): Include the path containing the array in the error\n    // message.\n    // In the case of IN queries, the parsed data is an array (representing\n    // the set of values to be included for the IN query) that may directly\n    // contain additional arrays (each representing an individual field\n    // value), so we disable this validation.\n    if (e.settings.nt && 4 /* UserDataSource.ArrayArgument */ !== e.tt) throw e.ut(\"Nested arrays are not supported\");\n    return function __PRIVATE_parseArray(t, e) {\n      const r = [];\n      let n = 0;\n      for (const i of t) {\n        let t = __PRIVATE_parseData(i, e.ot(n));\n        null == t && (\n        // Just include nulls in the array for fields being replaced with a\n        // sentinel.\n        t = {\n          nullValue: \"NULL_VALUE\"\n        }), r.push(t), n++;\n      }\n      return {\n        arrayValue: {\n          values: r\n        }\n      };\n    }(t, e);\n  }\n  return function __PRIVATE_parseScalarValue(t, e) {\n    if (null === (t = getModularInstance(t))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof t) return toNumber(e.serializer, t);\n    if (\"boolean\" == typeof t) return {\n      booleanValue: t\n    };\n    if (\"string\" == typeof t) return {\n      stringValue: t\n    };\n    if (t instanceof Date) {\n      const r = Timestamp.fromDate(t);\n      return {\n        timestampValue: toTimestamp(e.serializer, r)\n      };\n    }\n    if (t instanceof Timestamp) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n      return {\n        timestampValue: toTimestamp(e.serializer, r)\n      };\n    }\n    if (t instanceof GeoPoint) return {\n      geoPointValue: {\n        latitude: t.latitude,\n        longitude: t.longitude\n      }\n    };\n    if (t instanceof Bytes) return {\n      bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)\n    };\n    if (t instanceof DocumentReference) {\n      const r = e.databaseId,\n        n = t.firestore._databaseId;\n      if (!n.isEqual(r)) throw e.ut(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);\n      return {\n        referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)\n      };\n    }\n    throw e.ut(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);\n  }\n  /**\n  * Checks whether an object looks like a JSON object that should be converted\n  * into a struct. Normal class/prototype instances are considered to look like\n  * JSON objects since they should be converted to a struct value. Arrays, Dates,\n  * GeoPoints, etc. are not considered to look like JSON objects since they map\n  * to specific FieldValue types other than ObjectValue.\n  */(t, e);\n}\nfunction __PRIVATE_parseObject(t, e) {\n  const r = {};\n  return !function isEmpty(t) {\n    for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n    return !0;\n  }(t) ? forEach(t, (t, n) => {\n    const i = __PRIVATE_parseData(n, e.rt(t));\n    null != i && (r[t] = i);\n  }) :\n  // If we encounter an empty object, we explicitly add it to the update\n  // mask to ensure that the server creates a map entry.\n  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n    mapValue: {\n      fields: r\n    }\n  };\n}\nfunction __PRIVATE_looksLikeJsonObject(t) {\n  return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue);\n}\nfunction __PRIVATE_validatePlainObject(t, e, r) {\n  if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {\n    return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n  }(r)) {\n    const n = __PRIVATE_valueDescription(r);\n    throw \"an object\" === n ? e.ut(t + \" a custom object\") : e.ut(t + \" \" + n);\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction __PRIVATE_fieldPathFromArgument$1(t, e, r) {\n  if ((\n  // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  e = getModularInstance(e)) instanceof FieldPath) return e._internalPath;\n  if (\"string\" == typeof e) return __PRIVATE_fieldPathFromDotSeparatedString(t, e);\n  throw __PRIVATE_createError(\"Field path arguments must be of type string or \", t, /* hasConverter= */!1, /* path= */void 0, r);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst j = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\nfunction __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {\n  if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, /* hasConverter= */!1, /* path= */void 0, r);\n  try {\n    return new FieldPath(...e.split(\".\"))._internalPath;\n  } catch (n) {\n    throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, /* hasConverter= */!1, /* path= */void 0, r);\n  }\n}\nfunction __PRIVATE_createError(t, e, r, n, i) {\n  const s = n && !n.isEmpty(),\n    o = void 0 !== i;\n  let a = `Function ${e}() called with invalid data`;\n  r && (a += \" (via `toFirestore()`)\"), a += \". \";\n  let u = \"\";\n  return (s || o) && (u += \" (found\", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), u += \")\"), new FirestoreError(T, a + t + u);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction __PRIVATE_fieldMaskContains(t, e) {\n  return t.some(t => t.isEqual(e));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nclass DocumentSnapshot {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n  /** @hideconstructor protected */\n  constructor(t, e, r, n, i) {\n    this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, this._converter = i;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n   */\n  get ref() {\n    return new DocumentReference(this._firestore, this._converter, this._key);\n  }\n  /**\n   * Signals whether or not the document at the snapshot's location exists.\n   *\n   * @returns true if the document exists.\n   */\n  exists() {\n    return null !== this._document;\n  }\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * @returns An `Object` containing all fields in the document or `undefined`\n   * if the document doesn't exist.\n   */\n  data() {\n    if (this._document) {\n      if (this._converter) {\n        // We only want to use the converter and create a new DocumentSnapshot\n        // if a converter has been provided.\n        const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */null);\n        return this._converter.fromFirestore(t);\n      }\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(t) {\n    if (this._document) {\n      const e = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", t));\n      if (null !== e) return this._userDataWriter.convertValue(e);\n    }\n  }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * @override\n   * @returns An `Object` containing all fields in the document.\n   */\n  data() {\n    return super.data();\n  }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nclass QuerySnapshot {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._docs = e, this.query = t;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n  get docs() {\n    return [...this._docs];\n  }\n  /** The number of documents in the `QuerySnapshot`. */\n  get size() {\n    return this.docs.length;\n  }\n  /** True if there are no documents in the `QuerySnapshot`. */\n  get empty() {\n    return 0 === this.docs.length;\n  }\n  /**\n   * Enumerates all of the documents in the `QuerySnapshot`.\n   *\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n   * each document in the snapshot.\n   * @param thisArg - The `this` binding for the callback.\n   */\n  forEach(t, e) {\n    this._docs.forEach(t, e);\n  }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\nfunction snapshotEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof DocumentSnapshot && e instanceof DocumentSnapshot ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof QuerySnapshot && e instanceof QuerySnapshot && queryEqual(t.query, e.query) && __PRIVATE_arrayEquals(t.docs, e.docs, snapshotEqual);\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\nfunction __PRIVATE_fieldPathFromArgument(t, e) {\n  return \"string\" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint extends AppliableConstraint {}\nfunction query(t, e, ...r) {\n  let n = [];\n  e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {\n    const e = t.filter(t => t instanceof QueryCompositeFilterConstraint).length,\n      r = t.filter(t => t instanceof QueryFieldFilterConstraint).length;\n    if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Converts Firestore's internal types to the JavaScript types that we expose\n  * to the user.\n  *\n  * @internal\n  */(n);\n  for (const e of n) t = e._apply(t);\n  return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\nclass QueryFieldFilterConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(t, e, r) {\n    super(), this._field = t, this._op = e, this._value = r, /** The type of this query constraint */\n    this.type = \"where\";\n  }\n  static _create(t, e, r) {\n    return new QueryFieldFilterConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = this._parse(t);\n    return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));\n  }\n  _parse(t) {\n    const e = __PRIVATE_newUserDataReader(t.firestore),\n      r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {\n        let a;\n        if (i.isKeyField()) {\n          if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === s || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n          if (\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s) {\n            __PRIVATE_validateDisjunctiveFilterElements(o, s);\n            const e = [];\n            for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));\n            a = {\n              arrayValue: {\n                values: e\n              }\n            };\n          } else a = __PRIVATE_parseDocumentIdValue(n, t, o);\n        } else \"in\" /* Operator.IN */ !== s && \"not-in\" /* Operator.NOT_IN */ !== s && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), a = __PRIVATE_parseQueryValue(r, e, o, /* allowArrays= */\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s);\n        return FieldFilter.create(i, s, a);\n      }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n    return r;\n  }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\nfunction where(t, e, r) {\n  const n = e,\n    i = __PRIVATE_fieldPathFromArgument(\"where\", t);\n  return QueryFieldFilterConstraint._create(i, n, r);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */\nclass QueryCompositeFilterConstraint extends AppliableConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e) {\n    super(), this.type = t, this._queryConstraints = e;\n  }\n  static _create(t, e) {\n    return new QueryCompositeFilterConstraint(t, e);\n  }\n  _parse(t) {\n    const e = this._queryConstraints.map(e => e._parse(t)).filter(t => t.getFilters().length > 0);\n    return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());\n  }\n  _apply(t) {\n    const e = this._parse(t);\n    return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {\n      let r = t;\n      const n = e.getFlattenedFilters();\n      for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);\n    }\n    // Checks if any of the provided filter operators are included in the given list of filters and\n    // returns the first one that is, or null if none are.\n    (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));\n  }\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n  _getOperator() {\n    return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n  }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction or(...t) {\n  // Only support QueryFilterConstraints\n  return t.forEach(t => __PRIVATE_validateQueryFilterConstraint(\"or\", t)), QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */, t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction and(...t) {\n  // Only support QueryFilterConstraints\n  return t.forEach(t => __PRIVATE_validateQueryFilterConstraint(\"and\", t)), QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */, t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\nclass QueryOrderByConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(t, e) {\n    super(), this._field = t, this._direction = e, /** The type of this query constraint */\n    this.type = \"orderBy\";\n  }\n  static _create(t, e) {\n    return new QueryOrderByConstraint(t, e);\n  }\n  _apply(t) {\n    const e = function __PRIVATE_newQueryOrderBy(t, e, r) {\n      if (null !== t.startAt) throw new FirestoreError(T, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n      if (null !== t.endAt) throw new FirestoreError(T, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n      return new OrderBy(e, r);\n    }\n    /**\n    * Create a `Bound` from a query and a document.\n    *\n    * Note that the `Bound` will always include the key of the document\n    * and so only the provided document will compare equal to the returned\n    * position.\n    *\n    * Will throw if the document does not contain all fields of the order by\n    * of the query or if any of the fields in the order by are an uncommitted\n    * server timestamp.\n    */(t._query, this._field, this._direction);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithAddedOrderBy(t, e) {\n      // TODO(dimond): validate that orderBy does not list the same key twice.\n      const r = t.explicitOrderBy.concat([e]);\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, r, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n    }(t._query, e));\n  }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\nfunction orderBy(t, e = \"asc\") {\n  const r = e,\n    n = __PRIVATE_fieldPathFromArgument(\"orderBy\", t);\n  return QueryOrderByConstraint._create(n, r);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\nclass QueryLimitConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._limit = e, this._limitType = r;\n  }\n  static _create(t, e, r) {\n    return new QueryLimitConstraint(t, e, r);\n  }\n  _apply(t) {\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithLimit(t, e, r) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, r, t.startAt, t.endAt);\n    }(t._query, this._limit, this._limitType));\n  }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limit(t) {\n  return __PRIVATE_validatePositiveNumber(\"limit\", t), QueryLimitConstraint._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limitToLast(t) {\n  return __PRIVATE_validatePositiveNumber(\"limitToLast\", t), QueryLimitConstraint._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\nclass QueryStartAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n  }\n  static _create(t, e, r) {\n    return new QueryStartAtConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithStartAt(t, e) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n    }(t._query, e));\n  }\n}\nfunction startAt(...t) {\n  return QueryStartAtConstraint._create(\"startAt\", t, /*inclusive=*/!0);\n}\nfunction startAfter(...t) {\n  return QueryStartAtConstraint._create(\"startAfter\", t, /*inclusive=*/!1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\nclass QueryEndAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n  }\n  static _create(t, e, r) {\n    return new QueryEndAtConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithEndAt(t, e) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n    }(t._query, e));\n  }\n}\nfunction endBefore(...t) {\n  return QueryEndAtConstraint._create(\"endBefore\", t, /*inclusive=*/!1);\n}\nfunction endAt(...t) {\n  return QueryEndAtConstraint._create(\"endAt\", t, /*inclusive=*/!0);\n}\n\n/** Helper function to create a bound from a document or fields */\nfunction __PRIVATE_newQueryBoundFromDocOrFields(t, e, r, n) {\n  if (r[0] = getModularInstance(r[0]), r[0] instanceof DocumentSnapshot) return function __PRIVATE_newQueryBoundFromDocument(t, e, r, n, i) {\n    if (!n) throw new FirestoreError(R, `Can't use a DocumentSnapshot that doesn't exist for ${r}().`);\n    const s = [];\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const r of __PRIVATE_queryNormalizedOrderBy(t)) if (r.field.isKeyField()) s.push(__PRIVATE_refValue(e, n.key));else {\n      const t = n.data.field(r.field);\n      if (__PRIVATE_isServerTimestamp(t)) throw new FirestoreError(T, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + r.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n      if (null === t) {\n        const t = r.field.canonicalString();\n        throw new FirestoreError(T, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n      }\n      s.push(t);\n    }\n    return new Bound(s, i);\n  }\n  /**\n  * Converts a list of field values to a `Bound` for the given query.\n  */(t._query, t.firestore._databaseId, e, r[0]._document, n);\n  {\n    const i = __PRIVATE_newUserDataReader(t.firestore);\n    return function __PRIVATE_newQueryBoundFromFields(t, e, r, n, i, s) {\n      // Use explicit order by's because it has to match the query the user made\n      const o = t.explicitOrderBy;\n      if (i.length > o.length) throw new FirestoreError(T, `Too many arguments provided to ${n}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n      const a = [];\n      for (let s = 0; s < i.length; s++) {\n        const u = i[s];\n        if (o[s].field.isKeyField()) {\n          if (\"string\" != typeof u) throw new FirestoreError(T, `Invalid query. Expected a string for document ID in ${n}(), but got a ${typeof u}`);\n          if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== u.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${n}() must be a plain document ID, but '${u}' contains a slash.`);\n          const r = t.path.child(ResourcePath.fromString(u));\n          if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(T, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${n}() must result in a valid document path, but '${r}' is not because it contains an odd number of segments.`);\n          const i = new DocumentKey(r);\n          a.push(__PRIVATE_refValue(e, i));\n        } else {\n          const t = __PRIVATE_parseQueryValue(r, n, u);\n          a.push(t);\n        }\n      }\n      return new Bound(a, s);\n    }\n    /**\n    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n    * appropriate errors if the value is anything other than a `DocumentReference`\n    * or `string`, or if the string is malformed.\n    */(t._query, t.firestore._databaseId, i, e, r, n);\n  }\n}\nfunction __PRIVATE_parseDocumentIdValue(t, e, r) {\n  if (\"string\" == typeof (r = getModularInstance(r))) {\n    if (\"\" === r) throw new FirestoreError(T, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);\n    const n = e.path.child(ResourcePath.fromString(r));\n    if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);\n    return __PRIVATE_refValue(t, new DocumentKey(n));\n  }\n  if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);\n  throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction __PRIVATE_validateDisjunctiveFilterElements(t, e) {\n  if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\nfunction __PRIVATE_validateNewFieldFilter(t, e) {\n  const r = function __PRIVATE_findOpInsideFilters(t, e) {\n    for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n    return null;\n  }(t.filters, function __PRIVATE_conflictingOps(t) {\n    switch (t) {\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\n\n      case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n      case \"in\" /* Operator.IN */:\n        return [\"not-in\" /* Operator.NOT_IN */];\n\n      case \"not-in\" /* Operator.NOT_IN */:\n        return [\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, \"in\" /* Operator.IN */, \"not-in\" /* Operator.NOT_IN */, \"!=\" /* Operator.NOT_EQUAL */];\n\n      default:\n        return [];\n    }\n  }(e.op));\n  if (null !== r)\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);\n}\nfunction __PRIVATE_validateQueryFilterConstraint(t, e) {\n  if (!(e instanceof QueryFieldFilterConstraint || e instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(T, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction __PRIVATE_applyFirestoreDataConverter(t, e, r) {\n  let n;\n  // Cast to `any` in order to satisfy the union type constraint on\n  // toFirestore().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return n = t ? r && (r.merge || r.mergeFields) ? t.toFirestore(e, r) : t.toFirestore(e) : e, n;\n}\nclass __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {\n  convertValue(t, e = \"none\") {\n    switch (__PRIVATE_typeOrder(t)) {\n      case 0 /* TypeOrder.NullValue */:\n        return null;\n      case 1 /* TypeOrder.BooleanValue */:\n        return t.booleanValue;\n      case 2 /* TypeOrder.NumberValue */:\n        return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);\n      case 3 /* TypeOrder.TimestampValue */:\n        return this.convertTimestamp(t.timestampValue);\n      case 4 /* TypeOrder.ServerTimestampValue */:\n        return this.convertServerTimestamp(t, e);\n      case 5 /* TypeOrder.StringValue */:\n        return t.stringValue;\n      case 6 /* TypeOrder.BlobValue */:\n        return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));\n      case 7 /* TypeOrder.RefValue */:\n        return this.convertReference(t.referenceValue);\n      case 8 /* TypeOrder.GeoPointValue */:\n        return this.convertGeoPoint(t.geoPointValue);\n      case 9 /* TypeOrder.ArrayValue */:\n        return this.convertArray(t.arrayValue, e);\n      case 10 /* TypeOrder.ObjectValue */:\n        return this.convertObject(t.mapValue, e);\n      default:\n        throw fail();\n    }\n  }\n  convertObject(t, e) {\n    return this.convertObjectMap(t.fields, e);\n  }\n  /**\n   * @internal\n   */\n  convertObjectMap(t, e = \"none\") {\n    const r = {};\n    return forEach(t, (t, n) => {\n      r[t] = this.convertValue(n, e);\n    }), r;\n  }\n  convertGeoPoint(t) {\n    return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));\n  }\n  convertArray(t, e) {\n    return (t.values || []).map(t => this.convertValue(t, e));\n  }\n  convertServerTimestamp(t, e) {\n    switch (e) {\n      case \"previous\":\n        const r = __PRIVATE_getPreviousValue(t);\n        return null == r ? null : this.convertValue(r, e);\n      case \"estimate\":\n        return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));\n      default:\n        return null;\n    }\n  }\n  convertTimestamp(t) {\n    const e = __PRIVATE_normalizeTimestamp(t);\n    return new Timestamp(e.seconds, e.nanos);\n  }\n  convertDocumentKey(t, e) {\n    const r = ResourcePath.fromString(t);\n    __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));\n    const n = new DatabaseId(r.get(1), r.get(3)),\n      i = new DocumentKey(r.popFirst(5));\n    return n.isEqual(e) ||\n    // TODO(b/64130202): Somehow support foreign references.\n    __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), i;\n  }\n} {\n  constructor(t) {\n    super(), this.firestore = t;\n  }\n  convertBytes(t) {\n    return new Bytes(t);\n  }\n  convertReference(t) {\n    const e = this.convertDocumentKey(t, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, e);\n  }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\nfunction getDoc(t) {\n  const e = __PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore),\n    r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n  return __PRIVATE_invokeBatchGetDocumentsRpc(e, [t._key]).then(e => {\n    __PRIVATE_hardAssert(1 === e.length);\n    const n = e[0];\n    return new DocumentSnapshot(t.firestore, r, t._key, n.isFoundDocument() ? n : null, t.converter);\n  });\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\nfunction getDocs(t) {\n  (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {\n    if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, \"limitToLast() queries require specifying at least one orderBy() clause\");\n  })((t = __PRIVATE_cast(t, Query))._query);\n  const e = __PRIVATE_getDatastore(t.firestore),\n    r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n  return __PRIVATE_invokeRunQueryRpc(e, t._query).then(e => {\n    const n = e.map(e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter));\n    return \"L\" /* LimitType.Last */ === t._query.limitType &&\n    // Limit to last queries reverse the orderBy constraint that was\n    // specified by the user. As such, we need to reverse the order of the\n    // results to return the documents in the expected order.\n    n.reverse(), new QuerySnapshot(t, n);\n  });\n}\nfunction setDoc(t, e, r) {\n  const n = __PRIVATE_applyFirestoreDataConverter((t = __PRIVATE_cast(t, DocumentReference)).converter, e, r),\n    i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"setDoc\", t._key, n, null !== t.converter, r);\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [i.toMutation(t._key, Precondition.none())]);\n}\nfunction updateDoc(t, e, r, ...n) {\n  const i = __PRIVATE_newUserDataReader((t = __PRIVATE_cast(t, DocumentReference)).firestore);\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  let s;\n  s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(i, \"updateDoc\", t._key, e, r, n) : __PRIVATE_parseUpdateData(i, \"updateDoc\", t._key, e);\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [s.toMutation(t._key, Precondition.exists(!0))]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\nfunction deleteDoc(t) {\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [new __PRIVATE_DeleteMutation(t._key, Precondition.none())]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\nfunction addDoc(t, e) {\n  const r = doc(t = __PRIVATE_cast(t, CollectionReference)),\n    n = __PRIVATE_applyFirestoreDataConverter(t.converter, e),\n    i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"addDoc\", r._key, n, null !== r.converter, {});\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [i.toMutation(r._key, Precondition.exists(!1))]).then(() => r);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\nfunction getCount(t) {\n  return getAggregate(t, {\n    count: count()\n  });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */\nfunction getAggregate(t, e) {\n  const r = __PRIVATE_cast(t.firestore, Firestore),\n    n = __PRIVATE_getDatastore(r),\n    i = function __PRIVATE_mapToArray(t, e) {\n      const r = [];\n      for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && r.push(e(t[n], n, t));\n      return r;\n    }(e, (t, e) => new __PRIVATE_AggregateImpl(e, t.aggregateType, t._internalFieldPath));\n  // Run the aggregation and convert the results\n  return __PRIVATE_invokeRunAggregationQueryRpc(n, t._query, i).then(e => function __PRIVATE_convertToAggregateQuerySnapshot(t, e, r) {\n    const n = new __PRIVATE_LiteUserDataWriter(t);\n    return new AggregateQuerySnapshot(e, n, r);\n  }\n  /**\n  * Create an AggregateField object that can be used to compute the sum of\n  * a specified field over a range of documents in the result set of a query.\n  * @param field Specifies the field to sum across the result set.\n  */(r, t, e));\n}\nfunction sum(t) {\n  return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */\nfunction average(t) {\n  return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */\nfunction count() {\n  return new AggregateField(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */\nfunction aggregateFieldEqual(t, e) {\n  var r, n;\n  return t instanceof AggregateField && e instanceof AggregateField && t.aggregateType === e.aggregateType && (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString()) === (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\nfunction aggregateQuerySnapshotEqual(t, e) {\n  return queryEqual(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nfunction deleteField() {\n  return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nfunction serverTimestamp() {\n  return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nfunction arrayUnion(...t) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction arrayRemove(...t) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction increment(t) {\n  return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\nclass WriteBatch {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = __PRIVATE_newUserDataReader(t);\n  }\n  set(t, e, r) {\n    this._verifyNotCommitted();\n    const n = __PRIVATE_validateReference(t, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r),\n      s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", n._key, i, null !== n.converter, r);\n    return this._mutations.push(s.toMutation(n._key, Precondition.none())), this;\n  }\n  update(t, e, r, ...n) {\n    this._verifyNotCommitted();\n    const i = __PRIVATE_validateReference(t, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    let s;\n    return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, e), this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  delete(t) {\n    this._verifyNotCommitted();\n    const e = __PRIVATE_validateReference(t, this._firestore);\n    return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(e._key, Precondition.none())), this;\n  }\n  /**\n   * Commits all of the writes in this write batch as a single atomic unit.\n   *\n   * The result of these writes will only be reflected in document reads that\n   * occur after the returned promise resolves. If the client is offline, the\n   * write fails. If you would like to see local modifications or buffer writes\n   * until the client is online, use the full Firestore SDK.\n   *\n   * @returns A `Promise` resolved once all of the writes in the batch have been\n   * successfully written to the backend as an atomic unit (note that it won't\n   * resolve while you're offline).\n   */\n  commit() {\n    return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n  }\n  _verifyNotCommitted() {\n    if (this._committed) throw new FirestoreError(w, \"A write batch can no longer be used after commit() has been called.\");\n  }\n}\nfunction __PRIVATE_validateReference(t, e) {\n  if ((t = getModularInstance(t)).firestore !== e) throw new FirestoreError(T, \"Provided document reference is from a different Firestore instance.\");\n  return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\nfunction writeBatch(t) {\n  const e = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore));\n  return new WriteBatch(t, t => __PRIVATE_invokeCommitRpc(e, t));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nclass Transaction$1 {\n  constructor(t) {\n    this.datastore = t,\n    // The version of each document that was read during this transaction.\n    this.readVersions = new Map(), this.mutations = [], this.committed = !1,\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastWriteError = null,\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n  async lookup(t) {\n    if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new FirestoreError(T, \"Firestore transactions require all reads to be executed before all writes.\");\n    const e = await __PRIVATE_invokeBatchGetDocumentsRpc(this.datastore, t);\n    return e.forEach(t => this.recordVersion(t)), e;\n  }\n  set(t, e) {\n    this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n  update(t, e) {\n    try {\n      this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n    } catch (t) {\n      this.lastWriteError = t;\n    }\n    this.writtenDocs.add(t.toString());\n  }\n  delete(t) {\n    this.write(new __PRIVATE_DeleteMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n  async commit() {\n    if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n    const t = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(e => {\n      t.delete(e.key.toString());\n    }),\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    t.forEach((t, e) => {\n      const r = DocumentKey.fromPath(e);\n      this.mutations.push(new __PRIVATE_VerifyMutation(r, this.precondition(r)));\n    }), await __PRIVATE_invokeCommitRpc(this.datastore, this.mutations), this.committed = !0;\n  }\n  recordVersion(t) {\n    let e;\n    if (t.isFoundDocument()) e = t.version;else {\n      if (!t.isNoDocument()) throw fail();\n      // Represent a deleted doc using SnapshotVersion.min().\n      e = SnapshotVersion.min();\n    }\n    const r = this.readVersions.get(t.key.toString());\n    if (r) {\n      if (!e.isEqual(r))\n        // This transaction will fail no matter what.\n        throw new FirestoreError(g, \"Document version changed between two reads.\");\n    } else this.readVersions.set(t.key.toString(), e);\n  }\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  precondition(t) {\n    const e = this.readVersions.get(t.toString());\n    return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(e) : Precondition.none();\n  }\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  preconditionForUpdate(t) {\n    const e = this.readVersions.get(t.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(t.toString()) && e) {\n      if (e.isEqual(SnapshotVersion.min()))\n        // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(T, \"Can't update a document that doesn't exist.\");\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(e);\n    }\n    // Document was not read, so we just use the preconditions for a blind\n    // update.\n    return Precondition.exists(!0);\n  }\n  write(t) {\n    this.ensureCommitNotCalled(), this.mutations.push(t);\n  }\n  ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst z = {\n  maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass __PRIVATE_TransactionRunner {\n  constructor(t, e, r, n, i) {\n    this.asyncQueue = t, this.datastore = e, this.options = r, this.updateFunction = n, this.deferred = i, this.ft = r.maxAttempts, this.Et = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n  }\n  /** Runs the transaction and sets the result on deferred. */\n  run() {\n    this.ft -= 1, this.At();\n  }\n  At() {\n    this.Et.K(async () => {\n      const t = new Transaction$1(this.datastore),\n        e = this.Tt(t);\n      e && e.then(e => {\n        this.asyncQueue.enqueueAndForget(() => t.commit().then(() => {\n          this.deferred.resolve(e);\n        }).catch(t => {\n          this.Pt(t);\n        }));\n      }).catch(t => {\n        this.Pt(t);\n      });\n    });\n  }\n  Tt(t) {\n    try {\n      const e = this.updateFunction(t);\n      return !__PRIVATE_isNullOrUndefined(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n    } catch (t) {\n      // Do not retry errors thrown by user provided updateFunction.\n      return this.deferred.reject(t), null;\n    }\n  }\n  Pt(t) {\n    this.ft > 0 && this.Rt(t) ? (this.ft -= 1, this.asyncQueue.enqueueAndForget(() => (this.At(), Promise.resolve()))) : this.deferred.reject(t);\n  }\n  Rt(t) {\n    if (\"FirebaseError\" === t.name) {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const e = t.code;\n      return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n      /**\n      * Determines whether an error code represents a permanent error when received\n      * in response to a non-write operation.\n      *\n      * See isPermanentWriteError for classifying write errors.\n      */\n      function __PRIVATE_isPermanentError(t) {\n        switch (t) {\n          default:\n            return fail();\n          case m:\n          case A:\n          case P:\n          case y:\n          case D:\n          case b:\n          // Unauthenticated means something went wrong with our token and we need\n          // to retry with new credentials which will happen automatically.\n          case p:\n            return !1;\n          case T:\n          case R:\n          case I:\n          case V:\n          case w:\n          // Aborted might be retried in some scenarios, but that is dependant on\n          // the context and should handled individually by the calling code.\n          // See https://cloud.google.com/apis/design/errors.\n          case g:\n          case F:\n          case v:\n          case C:\n            return !0;\n        }\n      }(e);\n    }\n    return !1;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */\nfunction getDocument() {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nclass DelayedOperation {\n  constructor(t, e, r, n, i) {\n    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = r, this.op = n, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise),\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(t => {});\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule(t, e, r, n, i) {\n    const s = Date.now() + r,\n      o = new DelayedOperation(t, e, s, n, i);\n    return o.start(r), o;\n  }\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  start(t) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), t);\n  }\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(t) {\n    null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(m, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n  }\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then(t => this.deferred.resolve(t))) : Promise.resolve());\n  }\n  clearTimeout() {\n    null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_AsyncQueueImpl {\n  constructor() {\n    // The last promise in the queue.\n    this.It = Promise.resolve(),\n    // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.Vt = [],\n    // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this.yt = !1,\n    // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.wt = [],\n    // visible for testing\n    this.gt = null,\n    // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.Ft = !1,\n    // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.vt = !1,\n    // List of TimerIds to fast-forward delays for.\n    this.Dt = [],\n    // Backoff timer used to schedule retries for retryable operations\n    this.Et = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */),\n    // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.bt = () => {\n      const t = getDocument();\n      t && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.Et.H();\n    };\n    const t = getDocument();\n    t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.bt);\n  }\n  get isShuttingDown() {\n    return this.yt;\n  }\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget(t) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(t);\n  }\n  enqueueAndForgetEvenWhileRestricted(t) {\n    this.Ct(),\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.St(t);\n  }\n  enterRestrictedMode(t) {\n    if (!this.yt) {\n      this.yt = !0, this.vt = t || !1;\n      const e = getDocument();\n      e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.bt);\n    }\n  }\n  enqueue(t) {\n    if (this.Ct(), this.yt)\n      // Return a Promise which never resolves.\n      return new Promise(() => {});\n    // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n    const e = new __PRIVATE_Deferred();\n    return this.St(() => this.yt && this.vt ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(() => e.promise);\n  }\n  enqueueRetryable(t) {\n    this.enqueueAndForget(() => (this.Vt.push(t), this.Nt()));\n  }\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  async Nt() {\n    if (0 !== this.Vt.length) {\n      try {\n        await this.Vt[0](), this.Vt.shift(), this.Et.reset();\n      } catch (t) {\n        if (!\n        /**\n        * @license\n        * Copyright 2017 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */\n        /** Verifies whether `e` is an IndexedDbTransactionError. */\n        function __PRIVATE_isIndexedDbTransactionError(t) {\n          // Use name equality, as instanceof checks on errors don't work with errors\n          // that wrap other errors.\n          return \"IndexedDbTransactionError\" === t.name;\n        }\n        /**\n        * @license\n        * Copyright 2020 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */(t)) throw t;\n        // Failure will be handled by AsyncQueue\n        __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n      }\n      this.Vt.length > 0 &&\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.Et.K(() => this.Nt());\n    }\n  }\n  St(t) {\n    const e = this.It.then(() => (this.Ft = !0, t().catch(t => {\n      this.gt = t, this.Ft = !1;\n      const e =\n      /**\n      * Chrome includes Error.message in Error.stack. Other browsers do not.\n      * This returns expected output of message + stack when available.\n      * @param error - Error or FirestoreError\n      */\n      function __PRIVATE_getMessageOrStack(t) {\n        let e = t.message || \"\";\n        t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n        return e;\n      }\n      /**\n      * @license\n      * Copyright 2020 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n      // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n      // legacy SDK.\n      /**\n      * A reference to a transaction.\n      *\n      * The `Transaction` object passed to a transaction's `updateFunction` provides\n      * the methods to read and write data within the transaction context. See\n      * {@link runTransaction}.\n      */(t);\n      // Re-throw the error so that this.tail becomes a rejected Promise and\n      // all further attempts to chain (via .then) will just short-circuit\n      // and return the rejected Promise.\n      throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", e), t;\n    }).then(t => (this.Ft = !1, t))));\n    return this.It = e, e;\n  }\n  enqueueAfterDelay(t, e, r) {\n    this.Ct(),\n    // Fast-forward delays for timerIds that have been overriden.\n    this.Dt.indexOf(t) > -1 && (e = 0);\n    const n = DelayedOperation.createAndSchedule(this, t, e, r, t => this.Ot(t));\n    return this.wt.push(n), n;\n  }\n  Ct() {\n    this.gt && fail();\n  }\n  verifyOperationInProgress() {}\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async qt() {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let t;\n    do {\n      t = this.It, await t;\n    } while (t !== this.It);\n  }\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  Bt(t) {\n    for (const e of this.wt) if (e.timerId === t) return !0;\n    return !1;\n  }\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId - Delayed operations up to and including this TimerId\n   * will be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  Qt(t) {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.qt().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.wt.sort((t, e) => t.targetTimeMs - e.targetTimeMs);\n      for (const e of this.wt) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n      return this.qt();\n    });\n  }\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  $t(t) {\n    this.Dt.push(t);\n  }\n  /** Called once a DelayedOperation is run or canceled. */\n  Ot(t) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const e = this.wt.indexOf(t);\n    this.wt.splice(e, 1);\n  }\n}\nclass Transaction {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._transaction = e, this._dataReader = __PRIVATE_newUserDataReader(t);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  get(t) {\n    const e = __PRIVATE_validateReference(t, this._firestore),\n      r = new __PRIVATE_LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([e._key]).then(t => {\n      if (!t || 1 !== t.length) return fail();\n      const n = t[0];\n      if (n.isFoundDocument()) return new DocumentSnapshot(this._firestore, r, n.key, n, e.converter);\n      if (n.isNoDocument()) return new DocumentSnapshot(this._firestore, r, e._key, null, e.converter);\n      throw fail();\n    });\n  }\n  set(t, e, r) {\n    const n = __PRIVATE_validateReference(t, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r),\n      s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", n._key, i, null !== n.converter, r);\n    return this._transaction.set(n._key, s), this;\n  }\n  update(t, e, r, ...n) {\n    const i = __PRIVATE_validateReference(t, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    let s;\n    return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, e), this._transaction.update(i._key, s), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  delete(t) {\n    const e = __PRIVATE_validateReference(t, this._firestore);\n    return this._transaction.delete(e._key), this;\n  }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\nfunction runTransaction(t, e, r) {\n  const n = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore)),\n    i = Object.assign(Object.assign({}, z), r);\n  !function __PRIVATE_validateTransactionOptions(t) {\n    if (t.maxAttempts < 1) throw new FirestoreError(T, \"Max attempts must be at least 1\");\n  }(i);\n  const s = new __PRIVATE_Deferred();\n  return new __PRIVATE_TransactionRunner(function __PRIVATE_newAsyncQueue() {\n    return new __PRIVATE_AsyncQueueImpl();\n  }(), n, i, r => e(new Transaction(t, r)), s).run(), s.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n!function __PRIVATE_registerFirestore() {\n  !function __PRIVATE_setSDKVersion(t) {\n    d = t;\n  }(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", (t, {\n    instanceIdentifier: e,\n    options: r\n  }) => {\n    const n = t.getProvider(\"app\").getImmediate(),\n      i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider(\"auth-internal\")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [\"projectId\"])) throw new FirestoreError(T, '\"projectId\" not provided in firebase.initializeApp.');\n        return new DatabaseId(t.options.projectId, e);\n      }\n      /**\n      * @license\n      * Copyright 2017 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */(n, e), n);\n    return r && i._setSettings(r), i;\n  }, \"PUBLIC\").setMultipleInstances(!0)),\n  // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n  registerVersion(\"firestore-lite\", \"4.4.0\", \"\"), registerVersion(\"firestore-lite\", \"4.4.0\", \"esm2017\");\n}();\nexport { AggregateField, AggregateQuerySnapshot, Bytes, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, Timestamp, Transaction, WriteBatch, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, doc, documentId, endAt, endBefore, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, where, writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}