{"ast":null,"code":"import axios from\"axios\";import axiosRetry from\"axios-retry\";const serviceAxios=axios.create({baseURL:\"\",timeout:15*1000,withCredentials:false,headers:{\"Content-Type\":\"application/json;charset=utf-8\"}});axiosRetry(serviceAxios,{retries:2,shouldResetTimeout:true,retryDelay:retryCount=>{return retryCount*10000;},retryCondition:err=>{const{message}=err;return message.includes(\"timeout\");}});serviceAxios.interceptors.request.use(config=>{console.log(\"Define request interceptor\");return config;},err=>{console.log(\"Define request interceptor error\");return Promise.reject(err);});serviceAxios.interceptors.response.use(response=>{console.log(\"Define response interceptor\");return response;},err=>{console.log(\"Define response interceptor error\");return Promise.reject(err);});function createRequest(service){return function(config){return service(config);};}export default createRequest(serviceAxios);","map":{"version":3,"names":["axios","axiosRetry","serviceAxios","create","baseURL","timeout","withCredentials","headers","retries","shouldResetTimeout","retryDelay","retryCount","retryCondition","err","message","includes","interceptors","request","use","config","console","log","Promise","reject","response","createRequest","service"],"sources":["/Users/parkjaesung/Documents/GitHub/mingle_ai_web/src/apis/square/AxiosInstanceSquare.ts"],"sourcesContent":["import axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport {\n  type AxiosInstance,\n  InternalAxiosRequestConfig,\n  AxiosRequestConfig,\n  AxiosResponse,\n  AxiosError,\n} from \"axios\";\n\nconst serviceAxios = axios.create({\n  baseURL: \"\",\n  timeout: 15 * 1000,\n  withCredentials: false,\n  headers: {\n    \"Content-Type\": \"application/json;charset=utf-8\",\n  },\n});\n\naxiosRetry(serviceAxios, {\n  retries: 2,\n  shouldResetTimeout: true,\n  retryDelay: (retryCount) => {\n    return retryCount * 10000;\n  },\n  retryCondition: (err) => {\n    const { message } = err;\n    return message.includes(\"timeout\");\n  },\n});\n\nserviceAxios.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    console.log(\"Define request interceptor\");\n    return config;\n  },\n  (err: AxiosError) => {\n    console.log(\"Define request interceptor error\");\n    return Promise.reject(err);\n  }\n);\n\nserviceAxios.interceptors.response.use(\n  (response: AxiosResponse) => {\n    console.log(\"Define response interceptor\");\n    return response;\n  },\n  (err: AxiosError) => {\n    console.log(\"Define response interceptor error\");\n    return Promise.reject(err);\n  }\n);\n\nfunction createRequest(service: AxiosInstance) {\n  return function <T>(config: AxiosRequestConfig): Promise<T> {\n    return service(config);\n  };\n}\n\nexport default createRequest(serviceAxios);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,UAAU,KAAM,aAAa,CASpC,KAAM,CAAAC,YAAY,CAAGF,KAAK,CAACG,MAAM,CAAC,CAChCC,OAAO,CAAE,EAAE,CACXC,OAAO,CAAE,EAAE,CAAG,IAAI,CAClBC,eAAe,CAAE,KAAK,CACtBC,OAAO,CAAE,CACP,cAAc,CAAE,gCAClB,CACF,CAAC,CAAC,CAEFN,UAAU,CAACC,YAAY,CAAE,CACvBM,OAAO,CAAE,CAAC,CACVC,kBAAkB,CAAE,IAAI,CACxBC,UAAU,CAAGC,UAAU,EAAK,CAC1B,MAAO,CAAAA,UAAU,CAAG,KAAK,CAC3B,CAAC,CACDC,cAAc,CAAGC,GAAG,EAAK,CACvB,KAAM,CAAEC,OAAQ,CAAC,CAAGD,GAAG,CACvB,MAAO,CAAAC,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,CACpC,CACF,CAAC,CAAC,CAEFb,YAAY,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAClCC,MAAkC,EAAK,CACtCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,MAAO,CAAAF,MAAM,CACf,CAAC,CACAN,GAAe,EAAK,CACnBO,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAC/C,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACV,GAAG,CAAC,CAC5B,CACF,CAAC,CAEDX,YAAY,CAACc,YAAY,CAACQ,QAAQ,CAACN,GAAG,CACnCM,QAAuB,EAAK,CAC3BJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC1C,MAAO,CAAAG,QAAQ,CACjB,CAAC,CACAX,GAAe,EAAK,CACnBO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAChD,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACV,GAAG,CAAC,CAC5B,CACF,CAAC,CAED,QAAS,CAAAY,aAAaA,CAACC,OAAsB,CAAE,CAC7C,MAAO,UAAaP,MAA0B,CAAc,CAC1D,MAAO,CAAAO,OAAO,CAACP,MAAM,CAAC,CACxB,CAAC,CACH,CAEA,cAAe,CAAAM,aAAa,CAACvB,YAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}