{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nconst ece = require('http_ece');\nconst encrypt = function (userPublicKey, userAuth, payload, contentEncoding) {\n  if (!userPublicKey) {\n    throw new Error('No user public key provided for encryption.');\n  }\n  if (typeof userPublicKey !== 'string') {\n    throw new Error('The subscription p256dh value must be a string.');\n  }\n  if (Buffer.from(userPublicKey, 'base64url').length !== 65) {\n    throw new Error('The subscription p256dh value should be 65 bytes long.');\n  }\n  if (!userAuth) {\n    throw new Error('No user auth provided for encryption.');\n  }\n  if (typeof userAuth !== 'string') {\n    throw new Error('The subscription auth key must be a string.');\n  }\n  if (Buffer.from(userAuth, 'base64url').length < 16) {\n    throw new Error('The subscription auth key should be at least 16 ' + 'bytes long');\n  }\n  if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {\n    throw new Error('Payload must be either a string or a Node Buffer.');\n  }\n  if (typeof payload === 'string' || payload instanceof String) {\n    payload = Buffer.from(payload);\n  }\n  const localCurve = crypto.createECDH('prime256v1');\n  const localPublicKey = localCurve.generateKeys();\n  const salt = crypto.randomBytes(16).toString('base64url');\n  const cipherText = ece.encrypt(payload, {\n    version: contentEncoding,\n    dh: userPublicKey,\n    privateKey: localCurve,\n    salt: salt,\n    authSecret: userAuth\n  });\n  return {\n    localPublicKey: localPublicKey,\n    salt: salt,\n    cipherText: cipherText\n  };\n};\nmodule.exports = {\n  encrypt: encrypt\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}